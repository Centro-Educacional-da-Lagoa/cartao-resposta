# ===========================================
# SISTEMA DE CORRE√á√ÉO DE CART√ÉO RESPOSTA
# ===========================================
# 
# TECNOLOGIAS UTILIZADAS:
# - OCR (Tesseract): Para extrair TEXTOS (escola, nome do aluno)
# - OMR/OpenCV: Para detectar ALTERNATIVAS marcadas (bolhas pintadas)
# - GEMINI Vision: Para an√°lise inteligente e valida√ß√£o de detec√ß√µes
# - PDF2IMAGE: Para converter PDFs em imagens process√°veis
#
# ESTRUTURA:
# 1. PDF ‚Üí Convers√£o para imagem (se necess√°rio)
# 2. OCR ‚Üí Cabe√ßalho (escola, nome, nascimento, turma)  
# 3. OMR ‚Üí 52 quest√µes organizadas em 4 colunas (A, B, C, D)
# 4. GEMINI ‚Üí Valida√ß√£o e corre√ß√£o das detec√ß√µes
# ===========================================

from PIL import Image
import pytesseract
import cv2
import numpy as np
import re
import gspread
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from googleapiclient.errors import HttpError
from datetime import datetime
import os
import base64
import io
import tempfile
import shutil
import argparse
from typing import List, Dict, Optional
from sklearn.cluster import KMeans

# Importa√ß√£o do processador de PDF
try:
    from pdf_processor_simple import process_pdf_file, is_pdf_file, setup_pdf_support
    PDF_PROCESSOR_AVAILABLE = True
except ImportError:
    PDF_PROCESSOR_AVAILABLE = False

# Importa√ß√£o condicional do Gemini
try:
    import google.generativeai as genai
    GEMINI_DISPONIVEL = True
    print("‚úÖ Gemini dispon√≠vel")
except ImportError:
    GEMINI_DISPONIVEL = True
    print("‚ö†Ô∏è Gemini n√£o dispon√≠vel (google-generativeai n√£o instalado)")
    genai = None

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

EXTENSOES_SUPORTADAS = ('.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.pdf', '.webp')
DRIVE_MIME_TO_EXT = {
    'application/pdf': '.pdf',
    'image/png': '.png',
    'image/jpeg': '.jpg',
    'image/jpg': '.jpg',
    'image/bmp': '.bmp',
    'image/tiff': '.tiff',
    'image/webp': '.webp'
}

# ===========================================
# SE√á√ÉO 0: PREPROCESSAMENTO DE ARQUIVOS (PDF/IMAGEM)
# ===========================================

def preprocessar_arquivo(file_path: str, tipo: str = "aluno") -> str:
    """
    Preprocessa arquivo (PDF ou imagem) para garantir que temos uma imagem process√°vel
    
    Args:
        file_path: Caminho para o arquivo (PDF ou imagem)
        tipo: Tipo do arquivo ("aluno", "gabarito") para logs
        
    Returns:
        Caminho para a imagem process√°vel
    """
    print(f"\nüîÑ PREPROCESSANDO ARQUIVO {tipo.upper()}: {os.path.basename(file_path)}")
    
    # Verificar se arquivo existe
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Arquivo n√£o encontrado: {file_path}")
    
    # Se for PDF, converter para imagem
    if is_pdf_file(file_path) and PDF_PROCESSOR_AVAILABLE:
        print(f"Arquivo PDF detectado - convertendo para imagem...")
        try:
            best_image, temp_files = process_pdf_file(file_path, keep_temp_files=False)
            print(f" Imagem gerada: {os.path.basename(best_image)}")
            return best_image
        except Exception as e:
            print(f"‚ùå Erro ao converter PDF: {e}")
            raise e
    
    # Se for imagem, verificar se √© v√°lida
    elif file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):
        try:
            # Tentar carregar a imagem para validar
            img = Image.open(file_path)
            img.verify()  # Verificar se a imagem √© v√°lida
            return file_path
        except Exception as e:
            raise Exception(f"Arquivo de imagem inv√°lido: {e}")
    
    # Tipo de arquivo n√£o suportado
    else:
        if is_pdf_file(file_path) and not PDF_PROCESSOR_AVAILABLE:
            raise Exception(
                "Arquivo PDF detectado, mas processador de PDF n√£o est√° dispon√≠vel.\n"
                "Instale com: pip install pdf2image"
            )
        else:
            raise Exception(
                f"Tipo de arquivo n√£o suportado: {file_path}\n"
                "Formatos suportados: PDF, PNG, JPG, JPEG, BMP, TIFF"
            )

def listar_arquivos_suportados(diretorio: str = ".") -> dict:
    """
    Lista todos os arquivos suportados no diret√≥rio
    
    Returns:
        Dicion√°rio com listas de arquivos por tipo
    """
    arquivos_suportados = {
        'imagens': [],
        'pdfs': [],
        'todos': []
    }
    
    extensoes_imagem = ('.png', '.jpg', '.jpeg', '.bmp', '.tiff')
    
    for arquivo in os.listdir(diretorio):
        caminho_completo = os.path.join(diretorio, arquivo)
        if os.path.isfile(caminho_completo):
            if arquivo.lower().endswith('.pdf'):
                arquivos_suportados['pdfs'].append(arquivo)
                arquivos_suportados['todos'].append(arquivo)
            elif arquivo.lower().endswith(extensoes_imagem):
                arquivos_suportados['imagens'].append(arquivo)
                arquivos_suportados['todos'].append(arquivo)
    
    return arquivos_suportados

# ===========================================
# SE√á√ÉO 1: OCR - EXTRA√á√ÉO DE TEXTOS DO CABE√áALHO
# ===========================================

def recortar_cabecalho(image_path):
    """OCR: Recorta regi√£o do cabe√ßalho para extra√ß√£o de textos"""
    img = Image.open(image_path)
    width, height = img.size
    
    # Crop mais amplo para capturar todo o cabe√ßalho
    crop_box = (int(width*0.05), int(height*0.02), int(width*0.61), int(height*0.40))
    cabecalho = img.crop(crop_box)
    
    # Salvar imagem de debug
    cabecalho.save("debug_cabecalho.png")

    return cabecalho

def extrair_campos_cabecalho(texto):
    """OCR: Extrai dados do aluno usando Tesseract"""
    escola = aluno = nascimento = turma = "N/A"
    linhas = [l.strip() for l in texto.split("\n") if len(l.strip()) > 2]
    
    print(f"üîç DEBUG EXTRA√á√ÉO DE CAMPOS:")
    print(f"Total de linhas v√°lidas: {len(linhas)}")
    for i, linha in enumerate(linhas):
        print(f"  Linha {i}: '{linha}'")
    
    # === EXTRA√á√ÉO FLEX√çVEL POR POSICIONAMENTO ESTRUTURAL ===
    
    # Escola - Abordagem flex√≠vel baseada em posi√ß√£o e contexto
    for i, l in enumerate(linhas):
        print(f"üè´ Analisando linha {i} para escola: '{l}'")
        
        # ESTRAT√âGIA 1: Detectar qualquer varia√ß√£o de "Nome escola" (muito flex√≠vel)
        if re.search(r'Nome[a-z]*\s*(d[aeo]|de)?\s*(Escol[aeo]|escola)', l, re.I):
            print(f"‚úÖ Encontrou padr√£o flex√≠vel de 'Nome escola' na linha {i}")
            
            # Extrair tudo depois do padr√£o at√© encontrar palavras de parada
            resto_linha = re.sub(r'^.*?Nome[a-z]*\s*(d[aeo]|de)?\s*(Escol[aeo]|escola)[:\s]*', '', l, flags=re.I)
            
            if resto_linha and len(resto_linha.strip()) > 2:
                # Limpar palavras de parada comuns
                escola = re.sub(r'\s*(RESULTADO\s+FINAL|TURMA|DATA|NASCIMENTO).*$', '', resto_linha, flags=re.I).strip()
                escola = re.sub(r'[\|\:\!]+\s*$', '', escola).strip()  # Remove caracteres finais
                
                if len(escola) > 2:
                    print(f"‚úÖ Escola extra√≠da da mesma linha: '{escola}'")
                    break
            
            # Se n√£o achou na mesma linha, procurar na pr√≥xima
            if i+1 < len(linhas):
                candidata = linhas[i+1].strip()
                if len(candidata) > 2 and not re.search(r'nome|completo|data|nascimento|turma', candidata, re.I):
                    escola = candidata
                    print(f"‚úÖ Escola extra√≠da da linha seguinte: '{escola}'")
                    break
    
    # Nome completo - Abordagem flex√≠vel baseada em posi√ß√£o e contexto
    for i, l in enumerate(linhas):
        print(f"üë§ Analisando linha {i} para nome: '{l}'")
        
        # ESTRAT√âGIA 1: Detectar qualquer varia√ß√£o de "Nome" (SEM escola)
        if re.search(r'Nome[a-z]*\s*(completo)?[:\s]*', l, re.I) and not re.search(r'escola', l, re.I):
            print(f"‚úÖ Encontrou padr√£o flex√≠vel de 'Nome' na linha {i}")
            
            # Extrair conte√∫do depois do padr√£o - CORRIGIDO para remover "completo" tamb√©m
            resto_linha = re.sub(r'^.*?Nome[a-z]*\s*(completo\s*)?[:\s]*', '', l, flags=re.I)
            
            if resto_linha and len(resto_linha.strip()) > 2:
                # Limpar palavras de parada
                nome = re.sub(r'\s*(DATA|NASCIMENTO|TURMA|RESULTADO).*$', '', resto_linha, flags=re.I).strip()
                nome = re.sub(r'[\|\:\!]+\s*$', '', nome).strip()
                
                # Verificar se parece ser um nome (pelo menos 2 palavras ou 1 palavra com mais de 3 chars)
                # E N√ÉO contenha palavras relacionadas a escola
                if (len(nome) > 2 and 
                    not re.search(r'escola|municipal|estadual|particular|escol|fundamental|m√©dio', nome, re.I) and
                    (len(nome.split()) >= 2 or len(nome) > 3)):
                    aluno = nome
                    print(f"‚úÖ Aluno extra√≠do da mesma linha: '{aluno}'")
                    break
            
            # Se n√£o achou na mesma linha, procurar nas pr√≥ximas 2 linhas
            for next_i in range(i+1, min(i+3, len(linhas))):
                candidato_bruto = linhas[next_i].strip()
                
                # APLICAR O MESMO REGEX na linha seguinte tamb√©m
                candidato = re.sub(r'^.*?Nome[a-z]*\s*(completo\s*)?[:\s]*', '', candidato_bruto, flags=re.I)
                
                # Se depois do regex ainda sobrou algo v√°lido
                if candidato and len(candidato.strip()) > 2:
                    candidato = re.sub(r'\s*(DATA|NASCIMENTO|TURMA|RESULTADO).*$', '', candidato, flags=re.I).strip()
                    candidato = re.sub(r'[\|\:\!]+\s*$', '', candidato).strip()
                    
                    # Verificar se √© um nome v√°lido
                    if (len(candidato) > 2 and 
                        not re.search(r'data|nascimento|turma|avalia√ß√£o|cart√£o|escola|municipal|resultado|fundamental', candidato, re.I) and
                        not candidato.upper() == candidato and  # N√£o √© tudo mai√∫sculo (evita t√≠tulos)
                        (len(candidato.split()) >= 2 or len(candidato) > 3)):  # 2+ palavras OU 1 palavra longa
                        
                        aluno = candidato
                        print(f"‚úÖ Aluno extra√≠do da linha {next_i} (com regex): '{aluno}'")
                        break
                else:
                    # Se n√£o h√° padr√£o "Nome", pegar linha direta (fallback)
                    if (len(candidato_bruto) > 2 and 
                        not re.search(r'data|nascimento|turma|avalia√ß√£o|cart√£o|escola|municipal|resultado|fundamental', candidato_bruto, re.I) and
                        not candidato_bruto.upper() == candidato_bruto and  # N√£o √© tudo mai√∫sculo
                        (len(candidato_bruto.split()) >= 2 or len(candidato_bruto) > 3)):
                        
                        aluno = candidato_bruto
                        print(f"‚úÖ Aluno extra√≠do da linha {next_i} (direto): '{aluno}'")
                        break
            
            if aluno:  # Se encontrou, sair do loop principal
                break
        
        # ESTRAT√âGIA 2: Detectar linha que parece ser um nome (heur√≠stica inteligente)
        elif (i > 5 and  # N√£o pegar t√≠tulos no in√≠cio
              len(l.split()) >= 2 and  # Pelo menos 2 palavras
              len(l) > 5 and len(l) < 50 and  # Tamanho razo√°vel
              l[0].isupper() and  # Primeira letra mai√∫scula
              not l.upper() == l and  # N√£o √© tudo mai√∫sculo
              not re.search(r'avalia√ß√£o|diagn√≥stica|cart√£o|resposta|escola|municipal|turma|resultado|ensino|fundamental|instru√ß√µes|julho|data|nascimento|preencha', l, re.I)):
            
            aluno = l.strip()
            print(f"‚úÖ Aluno detectado por heur√≠stica de nome (linha {i}): '{aluno}'")
            break
    
    # Data de nascimento
    for l in linhas:
        nasc_match = re.search(r'(\d{2})[\/\-](\d{1,2})[\/\-](\d{2,4})', l)
        if nasc_match:
            nascimento = f"{nasc_match.group(1)}/{nasc_match.group(2)}/{nasc_match.group(3)}"
            break
    
    # Turma
    for i, l in enumerate(linhas):
        if "turma" in l.lower():
            turma_match = re.search(r'Turma[: ]*([A-Za-z0-9¬∫¬™\-_/]{1,8})', l, re.I)
            if turma_match and turma_match.group(1).strip():
                turma = turma_match.group(1).strip()
            elif i+1 < len(linhas):
                candidato = linhas[i+1].strip()
                if 1 < len(candidato) <= 8:
                    turma = candidato
            break
    
    return {
        "Escola": escola,
        "Aluno": aluno,
        "Nascimento": nascimento,
        "Turma": turma
    }

# ===========================================
# SE√á√ÉO 2: OMR - DETEC√á√ÉO DE ALTERNATIVAS MARCADAS
# ===========================================

def detectar_respostas_pdf(image_path, debug=False):
    """
    Detecta as respostas marcadas no cart√£o resposta convertido de PDF.
    Otimizado para imagens de alta resolu√ß√£o com par√¢metros espec√≠ficos para PDFs.
    Retorna uma lista com as respostas ['A', 'B', 'C', 'D', '?'] onde '?' significa n√£o detectado.
    """
    
    # CARREGAR E PREPROCESSAR IMAGEM
    image = cv2.imread(image_path)
    if image is None:
        print(f"Erro: N√£o foi poss√≠vel carregar a imagem {image_path}")
        return ['?'] * 52
    
    # Verificar se √© uma imagem de alta resolu√ß√£o (provavelmente de PDF)
    height, width = image.shape[:2]
    is_high_res = width > 3000 or height > 2000
    
    print(f"üìê Imagem PDF detectada: {width}x{height} pixels")
    
    # CROP ESPEC√çFICO para alta resolu√ß√£o - √°rea das quest√µes
    # Para PDFs, usar propor√ß√µes similares mas ajustadas
    crop = image[int(height*0.55):int(height*0.98), int(width*0.02):int(width*0.98)]
    
    gray = cv2.cvtColor(crop, cv2.COLOR_BGR2GRAY)
    
    # Par√¢metros otimizados para PDF de alta resolu√ß√£o
    if is_high_res:
        # Para alta resolu√ß√£o, usar par√¢metros mais refinados
        blur = cv2.GaussianBlur(gray, (9, 9), 0)
        # Threshold OTSU autom√°tico para melhor adapta√ß√£o
        _, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        
        # Kernel maior para opera√ß√µes morfol√≥gicas em alta resolu√ß√£o
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (12, 12))
        thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
        thresh = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
        
        # Faixa de √°rea adaptada para alta resolu√ß√£o
        area_min = 600   # √Årea m√≠nima para alta resolu√ß√£o
        area_max = 6000  # √Årea m√°xima para alta resolu√ß√£o
        circularity_min = 0.12  # Menos rigoroso para marca√ß√µes irregulares
        intensity_max = 60      # Intensidade m√°xima ajustada
        
    else:
        # Par√¢metros padr√£o para resolu√ß√£o normal
        blur = cv2.GaussianBlur(gray, (3, 3), 0)
        _, thresh = cv2.threshold(blur, 30, 155, cv2.THRESH_BINARY_INV)
        
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
        thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
        thresh = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
        
        area_min = 150
        area_max = 800
        circularity_min = 0.25
        intensity_max = 35
    
    # Encontrar contornos
    contornos, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    bolhas_pintadas = []
    
    for cnt in contornos:
        area = cv2.contourArea(cnt)
        
        if area_min < area < area_max:
            # Verificar circularidade
            perimeter = cv2.arcLength(cnt, True)
            if perimeter > 0:
                circularity = 4 * np.pi * area / (perimeter * perimeter)
                
                if circularity > circularity_min:
                    # Verificar aspect ratio mais flex√≠vel para PDFs
                    x, y, w, h = cv2.boundingRect(cnt)
                    aspect_ratio = float(w) / h
                    
                    if 0.2 <= aspect_ratio <= 5.0:  # Mais flex√≠vel para PDFs
                        # Calcular centro
                        M = cv2.moments(cnt)
                        if M["m00"] != 0:
                            cx = int(M["m10"] / M["m00"])
                            cy = int(M["m01"] / M["m00"])
                            
                            # Verificar se est√° na regi√£o v√°lida
                            crop_height, crop_width = crop.shape[:2]
                            margem_segura = max(30, min(crop_width, crop_height) // 40)
                            
                            if (margem_segura < cx < crop_width - margem_segura and 
                                margem_segura < cy < crop_height - margem_segura):
                                
                                # Calcular intensidade e preenchimento
                                mask = np.zeros(gray.shape, dtype=np.uint8)
                                cv2.drawContours(mask, [cnt], -1, 255, -1)
                                intensidade_media = cv2.mean(gray, mask=mask)[0]
                                
                                pixels_escuros = cv2.countNonZero(cv2.bitwise_and(thresh, mask))
                                percentual_preenchimento = pixels_escuros / area
                                
                                # Crit√©rios de aceita√ß√£o mais flex√≠veis para PDFs
                                aceita_marcacao = False
                                
                                # Marca√ß√£o escura bem preenchida
                                if intensidade_media < intensity_max and percentual_preenchimento > 0.25:
                                    aceita_marcacao = True
                                
                                # Marca√ß√£o circular mesmo que pouco preenchida
                                elif circularity > 0.3 and 0.1 <= percentual_preenchimento <= 0.9 and intensidade_media < intensity_max + 20:
                                    aceita_marcacao = True
                                
                                # Marca√ß√£o grande com baixa intensidade (marca grossa)
                                elif area > area_min * 2 and intensidade_media < intensity_max + 30 and percentual_preenchimento > 0.15:
                                    aceita_marcacao = True
                                
                                if aceita_marcacao:
                                    bolhas_pintadas.append((cx, cy, cnt, intensidade_media, area, circularity, percentual_preenchimento))
    
    if debug:
        print(f"=== DEBUG PDF - ALTA RESOLU√á√ÉO ===")
        print(f"√Årea do crop: {crop.shape[1]}x{crop.shape[0]} pixels")
        print(f"Par√¢metros usados - √Årea: {area_min}-{area_max}, Circ: {circularity_min:.2f}, Int: {intensity_max}")
        for i, (cx, cy, _, intensidade, area, circ, preenchimento) in enumerate(bolhas_pintadas):
            continue

    # Verificar se temos bolhas suficientes
    if len(bolhas_pintadas) < 6:  # M√≠nimo mais baixo para PDFs
        print(f"‚ö†Ô∏è Poucas bolhas detectadas em PDF ({len(bolhas_pintadas)}). Tentando processamento simplificado.")
        if len(bolhas_pintadas) < 2:
            return ['?'] * 52
    
    # Organiza√ß√£o em colunas usando clustering adaptativo
    xs = np.array([b[0] for b in bolhas_pintadas], dtype=np.float32).reshape(-1, 1)
    
    # Determinar n√∫mero de colunas baseado no n√∫mero de bolhas
    num_colunas = min(4, max(1, len(bolhas_pintadas) // 6))  # Mais flex√≠vel para PDFs
    
    if num_colunas < 4:
        print(f"‚ö†Ô∏è Detectadas apenas {num_colunas} colunas poss√≠veis em PDF. Processamento adaptativo.")
    
    from sklearn.cluster import KMeans
    
    try:
        kmeans = KMeans(n_clusters=num_colunas, random_state=42, n_init=10)
        cluster_labels = kmeans.fit_predict(xs)
        centroids = kmeans.cluster_centers_
        
        # Ordenar colunas da esquerda para direita
        order = np.argsort(centroids.flatten())
        col_mapping = {old: new for new, old in enumerate(order)}
        
        # Agrupar bolhas por coluna
        colunas = [[] for _ in range(num_colunas)]
        for i, (cx, cy, cnt, intensidade, area, circ, preenchimento) in enumerate(bolhas_pintadas):
            col_id = col_mapping[cluster_labels[i]]
            colunas[col_id].append((cx, cy, cnt, intensidade, area, circ, preenchimento))
        
        # Ordenar bolhas em cada coluna por posi√ß√£o Y (de cima para baixo)
        for col in colunas:
            col.sort(key=lambda x: x[1])  # Ordenar por cy (coordenada Y)
        
        # Mapear quest√µes para respostas usando distribui√ß√£o equilibrada
        respostas = ['?'] * 52
        questoes_por_coluna = 52 // num_colunas
        extra_questoes = 52 % num_colunas
        
        questao = 1
        
        for col_idx, coluna in enumerate(colunas):
            # Calcular quantas quest√µes esta coluna deve ter
            questoes_nesta_coluna = questoes_por_coluna + (1 if col_idx < extra_questoes else 0)
            
            for linha_idx, (cx, cy, cnt, intensidade, area, circ, preenchimento) in enumerate(coluna):
                if linha_idx < questoes_nesta_coluna and questao <= 52:
                    # Determinar a resposta baseada na posi√ß√£o X relativa
                    # Para PDFs, usar algoritmo mais sofisticado
                    
                    # Coletar todas as posi√ß√µes X √∫nicas na mesma linha Y (aproximadamente)
                    tolerancia_y = max(50, crop.shape[0] // 30)  # Toler√¢ncia proporcional
                    mesma_linha = []
                    
                    for outras_bolhas in colunas:
                        for ocx, ocy, _, _, _, _, _ in outras_bolhas:
                            if abs(ocy - cy) <= tolerancia_y:  # Mesma linha
                                mesma_linha.append(ocx)
                    
                    if len(mesma_linha) >= 2:
                        mesma_linha = sorted(set(mesma_linha))
                        if cx in mesma_linha:
                            pos_x = mesma_linha.index(cx)
                            if pos_x < 4:
                                resposta = ['A', 'B', 'C', 'D'][pos_x]
                            else:
                                resposta = 'D'
                        else:
                            resposta = 'A'
                    else:
                        # Fallback: usar posi√ß√£o relativa na coluna
                        resposta = ['A', 'B', 'C', 'D'][col_idx % 4]
                    
                    respostas[questao - 1] = resposta
                    if debug:
                        continue
                    questao += 1
        
        return respostas
        
    except Exception as e:
        print(f"Erro no clustering para PDF: {e}")
        return ['?'] * 52


def detectar_respostas(image_path, debug=False):
    """
    OMR: Detecta APENAS alternativas pintadas usando OpenCV
    Vers√£o aprimorada para lidar com PDFs convertidos
    """
    img_cv = cv2.imread(image_path)
    height, width = img_cv.shape[:2]
    
    # Crop ESPEC√çFICO para APENAS as 4 colunas de quest√µes (√°rea retangular completa)
    # Expandido para capturar todas as 4 colunas de quest√µes 1-52 + numera√ß√£o
    crop = img_cv[int(height*0.60):int(height*0.98), int(width*0.02):int(width*0.98)]
    
    # Converter para escala de cinza
    gray = cv2.cvtColor(crop, cv2.COLOR_BGR2GRAY)
    
    # Aplicar filtro suave
    blur = cv2.GaussianBlur(gray, (3, 3), 0)
    
    # FOCO: Threshold MUITO restritivo para detectar APENAS marca√ß√µes PRETAS
    _, thresh = cv2.threshold(blur, 30, 155, cv2.THRESH_BINARY_INV) 
    
    # Opera√ß√µes morfol√≥gicas para preencher bolhas
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    thresh = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
    
    # Encontrar contornos
    contornos, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    bolhas_pintadas = []
    
    for cnt in contornos:
        area = cv2.contourArea(cnt)
        
        # FOCO: √Årea mais espec√≠fica para bolinhas das quest√µes (n√£o texto ou elementos gr√°ficos)
        if 150 < area < 800:  # √Årea mais ampla para capturar diferentes tamanhos de marca√ß√£o
            # Verificar se tem formato aproximadamente circular/oval (mais flex√≠vel)
            perimeter = cv2.arcLength(cnt, True)
            if perimeter > 0:
                circularity = 4 * np.pi * area / (perimeter * perimeter)
                
                # FOCO: Circularidade bem mais flex√≠vel para aceitar marca√ß√µes irregulares
                if circularity > 0.25:  # Muito menos rigoroso para aceitar contornos e formas irregulares
                    # Verificar aspect ratio mais flex√≠vel
                    x, y, w, h = cv2.boundingRect(cnt)
                    aspect_ratio = float(w) / h
                    
                    if 0.3 <= aspect_ratio <= 3.0:  # Aceita formas bem mais alongadas ou irregulares
                        # Calcular centro
                        M = cv2.moments(cnt)
                        if M["m00"] != 0:
                            cx = int(M["m10"] / M["m00"])
                            cy = int(M["m01"] / M["m00"])
                            
                            # Verificar se est√° na regi√£o das quest√µes
                            crop_height, crop_width = crop.shape[:2]
                            if (20 < cx < crop_width - 20 and 20 < cy < crop_height - 20):
                                
                                # MELHORIA: Verificar densidade de pixels escuros na bolha
                                mask = np.zeros(gray.shape, dtype=np.uint8)
                                cv2.drawContours(mask, [cnt], -1, 255, -1)
                                intensidade_media = cv2.mean(gray, mask=mask)[0]
                                
                                # Calcular percentual de pixels escuros na bolha
                                pixels_escuros = cv2.countNonZero(cv2.bitwise_and(thresh, mask))
                                percentual_preenchimento = pixels_escuros / area
                                
                                # FOCO: ACEITAR MARCA√á√ïES VARIADAS (muito mais flex√≠vel)
                                # Aceita marca√ß√µes pretas, riscadas, contornadas, ou parcialmente preenchidas
                                if intensidade_media < 35 and percentual_preenchimento > 0.5:
                                    bolhas_pintadas.append((cx, cy, cnt, intensidade_media, area, circularity, percentual_preenchimento))
                                
                                # DETEC√á√ÉO ADICIONAL: Contornos circulares (como quest√µes 20, 21, 26)
                                # Para marca√ß√µes que s√£o apenas contornos com pouco preenchimento
                                elif circularity > 0.4 and 0.2 <= percentual_preenchimento <= 0.8 and intensidade_media < 45:
                                    bolhas_pintadas.append((cx, cy, cnt, intensidade_media, area, circularity, percentual_preenchimento))
    
    if debug:
        print(f"Bolhas pintadas detectadas: {len(bolhas_pintadas)}")
        print(f"√Årea do crop: {crop.shape[1]}x{crop.shape[0]} pixels")
        for i, (cx, cy, _, intensidade, area, circ, preenchimento) in enumerate(bolhas_pintadas):
            continue
        salvar_debug_deteccao(image_path, bolhas_pintadas, crop)
    
    # Verificar se temos bolhas suficientes para processamento
    if len(bolhas_pintadas) < 4:
        print(f"‚ö†Ô∏è Poucas bolhas detectadas ({len(bolhas_pintadas)}). Retornando lista vazia.")
        return ['?'] * 52
    
    # MELHORIA: Organiza√ß√£o mais precisa usando KMeans para detectar as 4 colunas
    
    # 1) Ap√≥s montar bolhas_pintadas, separe s√≥ os 'cx' (centros X)
    xs = np.array([b[0] for b in bolhas_pintadas], dtype=np.float32).reshape(-1, 1)

    # 2) Determinar n√∫mero de colunas baseado no n√∫mero de bolhas
    num_colunas = min(4, max(1, len(bolhas_pintadas) // 3))  # Pelo menos 3 bolhas por coluna
    
    if num_colunas < 4:
        print(f"‚ö†Ô∏è Detectadas apenas {num_colunas} colunas poss√≠veis. Processamento simplificado.")
    
    # 3) Descubra as BANDAS VERTICAIS (colunas de quest√µes) via KMeans
    k_cols = KMeans(n_clusters=num_colunas, n_init=10, random_state=0).fit(xs)
    col_idx_por_bolha = k_cols.predict(xs)
    centros_cols = sorted(k_cols.cluster_centers_.flatten())  # esquerda‚Üídireita

    # Mapeie cada bolha para a coluna correta usando a ordem dos centros
    # (reindexar para 0..num_colunas-1 na ordem esquerda‚Üídireita)
    ordem_cols = np.argsort(k_cols.cluster_centers_.flatten())
    remap = {int(c): i for i, c in enumerate(ordem_cols)}

    bolhas_por_coluna = [[] for _ in range(num_colunas)]
    for bolha, c_orig in zip(bolhas_pintadas, col_idx_por_bolha):
        if remap[int(c_orig)] < num_colunas:
            bolhas_por_coluna[remap[int(c_orig)]].append(bolha)

    # 4) Para CADA coluna, processar as quest√µes
    letras = ['A', 'B', 'C', 'D']
    respostas_finais = ['?'] * 52

    for col_idx, bolhas_coluna in enumerate(bolhas_por_coluna):
        if not bolhas_coluna:
            continue

        # Se h√° bolhas suficientes na coluna, tentar detectar alternativas A-D
        if len(bolhas_coluna) >= 4:
            xs_col = np.array([b[0] for b in bolhas_coluna], dtype=np.float32).reshape(-1, 1)
            num_alternativas = min(4, len(bolhas_coluna))
            k_opts = KMeans(n_clusters=num_alternativas, n_init=10, random_state=0).fit(xs_col)
            centros_opts = k_opts.cluster_centers_.flatten()
            ordem_opts = np.argsort(centros_opts)  # esquerda‚Üídireita ‚áí A,B,C,D
        else:
            # Processamento simplificado se h√° poucas bolhas
            ordem_opts = list(range(len(bolhas_coluna)))
            centros_opts = [b[0] for b in bolhas_coluna]

        # Agrupe por LINHAS usando toler√¢ncia mais flex√≠vel
        ys = sorted([b[1] for b in bolhas_coluna])
        dy = np.median(np.diff(ys)) if len(ys) > 5 else 25  # Espa√ßamento base maior
        tolerance_y = max(18, int(dy * 0.7))  # 70% do espa√ßamento (mais tolerante)

        linhas = []
        for bolha in sorted(bolhas_coluna, key=lambda b: b[1]):  # por Y
            cy = bolha[1]
            if not linhas or abs(cy - linhas[-1][0][1]) > tolerance_y:
                linhas.append([bolha])
            else:
                linhas[-1].append(bolha)

        # Ordene as linhas por Y
        linhas.sort(key=lambda linha: linha[0][1])
        
        # Rastrear linhas usadas com conjunto de √≠ndices
        linhas_usadas = set()

        # Cada coluna tem 13 quest√µes - MAPEAMENTO CORRETO
        offset_questao = col_idx * 13
        
        # Calcular as posi√ß√µes Y esperadas das 13 quest√µes na coluna
        if linhas:
            y_min = min(linha[0][1] for linha in linhas)
            y_max = max(linha[0][1] for linha in linhas)
            altura_total = y_max - y_min
            espacamento_questao = altura_total / 12 if len(linhas) > 1 else 25  # 12 intervalos para 13 quest√µes
        else:
            continue
            
        # Para cada quest√£o (0-12) na coluna
        num_questoes = min(13, 52 - offset_questao)  # N√£o exceder 52 quest√µes total
        
        for questao_idx in range(num_questoes):
            q = offset_questao + questao_idx
            if q >= 52:
                break
                
            # Calcular posi√ß√£o Y esperada desta quest√£o
            y_esperado = y_min + (questao_idx * espacamento_questao)
            
            # Encontrar a linha mais pr√≥xima desta posi√ß√£o Y
            linha_mais_proxima = None
            linha_mais_proxima_idx = -1
            menor_distancia = float('inf')
            
            for idx, linha in enumerate(linhas):
                if idx in linhas_usadas:  # Pular linhas j√° usadas
                    continue
                    
                y_linha = linha[0][1]  # Y da primeira bolha da linha
                distancia = abs(y_linha - y_esperado)
                
                # Toler√¢ncia: aceitar linha se estiver dentro de uma janela mais ampla
                if distancia < espacamento_questao * 1.5 and distancia < menor_distancia:
                    menor_distancia = distancia
                    linha_mais_proxima = linha
                    linha_mais_proxima_idx = idx
            
            if linha_mais_proxima is not None:
                # Marcar linha como usada
                linhas_usadas.add(linha_mais_proxima_idx)
                
                # Escolha a bolha mais "preta" da linha
                bolha_marcada = min(linha_mais_proxima, key=lambda b: b[3] - (b[6] * 40))

                # Descobrir a ALTERNATIVA pela posi√ß√£o X
                cx = bolha_marcada[0]
                if len(centros_opts) >= 4:
                    idx_opt = np.argmin([abs(cx - centros_opts[j]) for j in range(len(centros_opts))])
                    if idx_opt < len(ordem_opts):
                        letra_idx = int(np.where(ordem_opts == idx_opt)[0][0])
                        if letra_idx < len(letras):
                            letra = letras[letra_idx]
                        else:
                            letra = '?'
                    else:
                        letra = '?'
                else:
                    # Processamento simplificado
                    letra = letras[0] if len(letras) > 0 else '?'

                respostas_finais[q] = letra
                
                if debug:
                    intensidade = bolha_marcada[3]
                    preenchimento = bolha_marcada[6]
                    
            
            # Se n√£o encontrou nenhuma linha, deixar como '?' (j√° √© o padr√£o)
            if respostas_finais[q] == '?' and debug:
                print(f"Quest√£o {q + 1}: ? (col {col_idx + 1}, linha {questao_idx + 1}, sem marca√ß√£o detectada)")
    
    if debug:
        questoes_detectadas = sum(1 for r in respostas_finais if r != '?')
        print(f"Total de quest√µes detectadas: {questoes_detectadas}")
        print(f"Respostas: {respostas_finais}")
    
    return respostas_finais

def salvar_debug_deteccao(image_path, bolhas_pintadas, crop):
    """Salva imagem de debug com as bolhas detectadas marcadas"""
    debug_img = crop.copy()
    
    for cx, cy, cnt, intensidade, area, circ, preenchimento in bolhas_pintadas:
        # Marcar com c√≠rculo verde
        cv2.circle(debug_img, (cx, cy), 8, (0, 255, 0), 2)
        # Adicionar texto com intensidade
        cv2.putText(debug_img, f"{intensidade:.0f}", (cx-15, cy-15), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 255, 0), 1)
    
    # Salvar imagem de debug
    filename = image_path.replace('.jpg', '').replace('.png', '')
    debug_filename = f"debug_{os.path.basename(filename)}.png"
    cv2.imwrite(debug_filename, debug_img)

# ===========================================
# SE√á√ÉO 3: GEMINI - AN√ÅLISE INTELIGENTE DE IMAGENS
# ===========================================

def configurar_gemini():
    """Configura o Gemini API"""
    if not GEMINI_DISPONIVEL:
        print("‚ùå Gemini n√£o est√° dispon√≠vel")
        print("üí° Para instalar: pip install google-generativeai")
        return None
        
    try:
        # Configure sua API key do Gemini aqui
        # Obtenha em: https://makersuite.google.com/app/apikey
        GEMINI_API_KEY = "AIzaSyCZJ0GhpbMi2koxkrdjjCqWYys6yIVM4v0"  # Substitua pela sua chave
        
        genai.configure(api_key=GEMINI_API_KEY)
        
        # Testar conex√£o
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        print("‚úÖ Gemini configurado com sucesso!")
        return model
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar Gemini: {e}")
        print("üí° Certifique-se de:")
        print("   1. Instalar: pip install google-generativeai")
        print("   2. Configurar sua API key do Gemini")
        print("   3. Verificar sua conex√£o com internet")
        return None

def converter_imagem_para_base64(image_path):
    """Converte imagem para base64 para envio ao Gemini"""
    try:
        with open(image_path, "rb") as image_file:
            image_data = image_file.read()
            
        # Converter para PIL Image
        image = Image.open(io.BytesIO(image_data))
        
        return image
        
    except Exception as e:
        print(f"‚ùå Erro ao converter imagem: {e}")
        return None

def analisar_cartao_com_gemini(model, image_path, tipo_analise="gabarito"):
    """
    Usa Gemini Vision para analisar cart√£o resposta
    """
    if not model:
        print("‚ö†Ô∏è Gemini n√£o configurado, pulando an√°lise inteligente")
        return None
        
    try:
        # Converter imagem
        image = converter_imagem_para_base64(image_path)
        if not image:
            return None
        
        # Prompt especializado para cart√£o resposta
        if tipo_analise == "gabarito":
            prompt = """
            Analise esta imagem de um cart√£o resposta (GABARITO) e identifique APENAS as bolinhas PRETAS marcadas.

            INSTRU√á√ïES ESPEC√çFICAS:
            1. Este √© um cart√£o com 52 quest√µes organizadas em 4 colunas (1-13, 14-26, 27-39, 40-52)
            2. Cada quest√£o tem 4 alternativas: A, B, C, D
            3. DETECTE APENAS bolinhas completamente PRETAS/PINTADAS com tinta preta
            4. IGNORE qualquer outra cor (verde, azul, vermelho, etc.)
            5. IGNORE c√≠rculos vazios ou apenas contornados
            6. IGNORE marca√ß√µes que n√£o sejam tinta preta s√≥lida
      

            FOCO: Apenas marca√ß√µes PRETAS s√≥lidas e bem preenchidas.

            FORMATO DE RESPOSTA:
            Retorne apenas uma lista Python com 52 elementos, exemplo:
            ['A', 'B', '?', 'C', 'D', 'A', '?', 'B', 'C', 'D', 'A', 'B', 'C', '?', 'D', 'A', 'B', 'C', 'D', 'A', 'B', '?', 'C', 'D', 'A', 'B', 'C', 'D', 'A', '?', 'D', 'A', 'B', 'C', 'D', 'A', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'D', 'C', 'A', 'B', 'C', 'D', 'D', '?']

            Seja EXTREMAMENTE rigoroso - apenas bolinhas COMPLETAMENTE PRETAS.
            """
        else:  # resposta_aluno
            prompt = """
            Analise esta imagem de um cart√£o resposta de ALUNO e identifique APENAS as bolinhas PRETAS marcadas.

            INSTRU√á√ïES ESPEC√çFICAS:
            1. Este √© um cart√£o com 52 quest√µes organizadas em 4 colunas (1-13, 14-26, 27-39, 40-52)
            2. Cada quest√£o tem 4 alternativas: A, B, C, D
            3. DETECTE APENAS bolinhas completamente PRETAS/PINTADAS pelo aluno
            4. IGNORE qualquer cor que n√£o seja PRETA (corre√ß√µes do professor em verde, azul, etc.)
            5. IGNORE c√≠rculos vazios ou apenas contornados
            6. IGNORE rabiscos, riscos ou outras marca√ß√µes
            7. FOQUE apenas em bolinhas S√ìLIDAS PRETAS bem preenchidas

            FOCO: Apenas as marca√ß√µes ORIGINAIS PRETAS do aluno.

            FORMATO DE RESPOSTA:
            Retorne apenas uma lista Python com 52 elementos, exemplo:
            ['A', 'B', '?', 'C', 'D', 'A', '?', 'B', 'C', 'D', 'A', 'B', 'C', '?', 'D', 'A', 'B', 'C', 'D', 'A', 'B', '?', 'C', 'D', 'A', 'B', 'C', 'D', 'A', '?', 'D', 'A', 'B', 'C', 'D', 'A', 'A', 'B', 'C', 'D', 'B', 'A', 'B', 'C', 'D', 'C', 'A', 'B', 'C', 'D', 'D', '?']

            Seja EXTREMAMENTE rigoroso - apenas bolinhas COMPLETAMENTE PRETAS do aluno.
            """
        
        # Fazer an√°lise com Gemini
        print(f"ü§ñ Analisando {tipo_analise} com Gemini...")
        response = model.generate_content([prompt, image])
        
        # Extrair lista da resposta
        resposta_texto = response.text.strip()
        
        # Tentar extrair lista Python da resposta
        import ast
        try:
            # Procurar por lista no texto
            inicio = resposta_texto.find('[')
            fim = resposta_texto.rfind(']') + 1
            
            if inicio >= 0 and fim > inicio:
                lista_str = resposta_texto[inicio:fim]
                respostas = ast.literal_eval(lista_str)
                
                # Validar se tem 52 elementos
                if len(respostas) == 52:
                    print(f"‚úÖ Gemini analisou {len(respostas)} quest√µes!")
                    return respostas
                else:
                    print(f"‚ö†Ô∏è Gemini retornou {len(respostas)} quest√µes, esperado 52")
                    # Ajustar para 52 elementos
                    while len(respostas) < 52:
                        respostas.append('?')
                    return respostas[:52]
            else:
                print("‚ùå N√£o foi poss√≠vel extrair lista da resposta do Gemini")
                print(f"Resposta recebida: {resposta_texto}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao processar resposta do Gemini: {e}")
            print(f"Resposta recebida: {resposta_texto}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na an√°lise com Gemini: {e}")
        return None

def extrair_cabecalho_com_gemini(model, image_path):
    """
    Usa Gemini Vision para extrair informa√ß√µes do cabe√ßalho do cart√£o resposta
    """
    if not model:
        print("‚ö†Ô∏è Gemini n√£o configurado, usando OCR")
        return None
        
    try:
        # Converter imagem
        image = converter_imagem_para_base64(image_path)
        if not image:
            return None
        
        # Prompt especializado para extrair dados do cabe√ßalho
        prompt = """
        Analise esta imagem de um cart√£o resposta e extraia APENAS as seguintes informa√ß√µes do cabe√ßalho:

        1. NOME DA ESCOLA - procure por campos como "Nome da Escola:", "Escola:", etc.
        2. NOME DO ALUNO - procure por campos como "Nome completo:", "Nome:", "Aluno:", etc.
        3. TURMA - procure por campos como "Turma:", "S√©rie:", "Ano:", etc.
        4. DATA DE NASCIMENTO - procure por campos como "Data de nascimento:", "Nascimento:", etc.

        INSTRU√á√ïES:
        - Extraia APENAS o conte√∫do, SEM os r√≥tulos (ex: se tem "Nome: Jo√£o Silva", extraia apenas "Jo√£o Silva")
        - Se alguma informa√ß√£o n√£o estiver vis√≠vel ou leg√≠vel, retorne "N/A"
        - Seja preciso na leitura dos textos
        - Ignore t√≠tulos como "AVALIA√á√ÉO DIAGN√ìSTICA", "CART√ÉO-RESPOSTA", etc.

        FORMATO DE RESPOSTA (retorne exatamente neste formato JSON):
        {
            "escola": "nome da escola ou N/A",
            "aluno": "nome do aluno ou N/A", 
            "turma": "turma ou N/A",
            "nascimento": "data ou N/A"
        }
        """
        
        # Gerar resposta
        response = model.generate_content([prompt, image])
        resposta_texto = response.text.strip()
        
        print(f"ü§ñ GEMINI CABE√áALHO - Resposta bruta: {resposta_texto}")
        
        # Tentar extrair JSON da resposta
        try:
            import json
            import re
            
            # Procurar por JSON na resposta
            json_match = re.search(r'\{.*\}', resposta_texto, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                dados = json.loads(json_str)
                
                # Validar estrutura
                if all(key in dados for key in ['escola', 'aluno', 'turma', 'nascimento']):
                    print(f"‚úÖ GEMINI extraiu dados do cabe√ßalho:")
                    print(f"   üè´ Escola: {dados['escola']}")
                    print(f"   üë§ Aluno: {dados['aluno']}")
                    print(f"   üìö Turma: {dados['turma']}")
                    print(f"   üìÖ Nascimento: {dados['nascimento']}")
                    return dados
                else:
                    print("‚ùå JSON n√£o tem todas as chaves necess√°rias")
                    return None
            else:
                print("‚ùå N√£o foi poss√≠vel extrair JSON da resposta")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao processar JSON do Gemini: {e}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na extra√ß√£o do cabe√ßalho com Gemini: {e}")
        return None

def extrair_cabecalho_com_ocr_fallback(image_path):
    """
    Fun√ß√£o de fallback usando OCR tradicional quando Gemini falha
    """
    try:
        print("üîÑ Usando OCR como fallback...")
        
        # Carregar imagem
        img = cv2.imread(image_path)
        if img is None:
            print(f"‚ùå Erro ao carregar imagem: {image_path}")
            return None
            
        # Converter para escala de cinza
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
        # Pegar apenas a parte superior da imagem (cabe√ßalho)
        height = gray.shape[0]
        header_region = gray[0:int(height * 0.3)]  # 30% superior
        
        # Melhorar contraste para OCR
        header_region = cv2.threshold(header_region, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
        
        # Extrair texto
        texto_completo = pytesseract.image_to_string(header_region, lang='por', config='--psm 6')
        
        # Processar texto extra√≠do
        linhas = texto_completo.split('\n')
        dados = {
            "escola": "N/A",
            "aluno": "N/A", 
            "turma": "N/A",
            "nascimento": "N/A"
        }
        
        # Procurar padr√µes no texto
        for linha in linhas:
            linha = linha.strip()
            if not linha:
                continue
                
            linha_lower = linha.lower()
            
            # Procurar escola
            if any(palavra in linha_lower for palavra in ['escola', 'col√©gio', 'instituto', 'centro']):
                if 'escola' in linha_lower or 'col√©gio' in linha_lower:
                    dados["escola"] = linha
                    
            # Procurar nome do aluno  
            if any(palavra in linha_lower for palavra in ['nome', 'aluno']):
                # Pular se for apenas o r√≥tulo
                if len(linha) > 10 and not linha_lower.startswith('nome'):
                    dados["aluno"] = linha
                    
            # Procurar turma
            if any(palavra in linha_lower for palavra in ['turma', 's√©rie', 'ano']):
                # Extrair n√∫meros da linha
                numeros = re.findall(r'\d+', linha)
                if numeros:
                    dados["turma"] = numeros[0]
                    
            # Procurar data de nascimento
            if any(palavra in linha_lower for palavra in ['nascimento', 'data']):
                # Procurar padr√£o de data
                data_match = re.search(r'\d{1,2}[/\-]\d{1,2}[/\-]\d{2,4}', linha)
                if data_match:
                    dados["nascimento"] = data_match.group()
        
        print(f"‚úÖ OCR extraiu dados b√°sicos")
        return dados
        
    except Exception as e:
        print(f"‚ùå Erro no OCR fallback: {e}")
        return None

def extrair_cabecalho_com_fallback(model, image_path):
    """
    Fun√ß√£o principal que tenta Gemini primeiro, depois OCR como fallback
    """
    # Tentar Gemini primeiro
    if model:
        try:
            dados_gemini = extrair_cabecalho_com_gemini(model, image_path)
            if dados_gemini:
                print("‚úÖ Gemini extraiu dados com sucesso")
                return dados_gemini
            else:
                print("‚ö†Ô∏è Gemini falhou, tentando OCR...")
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini com erro ({str(e)[:50]}...), usando OCR")
    
    # Fallback para OCR
    dados_ocr = extrair_cabecalho_com_ocr_fallback(image_path)
    if dados_ocr:
        return dados_ocr
    
    # Se tudo falhar, retornar dados vazios
    print("‚ùå Ambos Gemini e OCR falharam")
    return {
        "escola": "N/A",
        "aluno": "N/A", 
        "turma": "N/A",
        "nascimento": "N/A"
    }

def comparar_omr_vs_gemini(respostas_omr, respostas_gemini, tipo=""):
    """Compara resultados OMR vs Gemini e gera relat√≥rio"""
    if not respostas_gemini:
        print("‚ö†Ô∏è Gemini n√£o dispon√≠vel, usando apenas OMR")
        return respostas_omr
    
    diferencas = []
    concordancias = 0
    
    print(f"\nüîç COMPARA√á√ÉO OMR vs GEMINI ({tipo}):")
    print("Quest√£o | OMR | Gemini | Status")
    print("-" * 32)
    
    for i in range(min(len(respostas_omr), len(respostas_gemini))):
        omr = respostas_omr[i]
        gemini = respostas_gemini[i]
        
        if omr == gemini:
            status = "‚úÖ"
            concordancias += 1
        else:
            status = "‚ö†Ô∏è"
            diferencas.append({
                'questao': i + 1,
                'omr': omr,
                'gemini': gemini
            })
        
        print(f"   {i+1:02d}   | {omr:^3} | {gemini:^6} | {status}")
    
    total = len(respostas_omr)
    percentual_concordancia = (concordancias / total * 100) if total > 0 else 0
    
    print(f"\nüìä ESTAT√çSTICAS:")
    print(f"Concord√¢ncias: {concordancias}/{total} ({percentual_concordancia:.1f}%)")
    print(f"Diferen√ßas: {len(diferencas)}")
    
    # Decidir qual usar baseado na concord√¢ncia
    if percentual_concordancia >= 80:
        print("‚úÖ Alta concord√¢ncia - usando resultado OMR")
        return respostas_omr
    elif percentual_concordancia >= 50:
        print("‚ö†Ô∏è Concord√¢ncia m√©dia - usando h√≠brido OMR/Gemini")
        # Criar vers√£o h√≠brida (usar Gemini quando OMR detecta '?')
        resultado_hibrido = []
        for i in range(len(respostas_omr)):
            if respostas_omr[i] == '?' and i < len(respostas_gemini):
                resultado_hibrido.append(respostas_gemini[i])
            else:
                resultado_hibrido.append(respostas_omr[i])
        return resultado_hibrido
    else:
        print("ü§ñ Baixa concord√¢ncia - usando resultado Gemini")
        return respostas_gemini

# ===========================================
# SE√á√ÉO 4: INTEGRA√á√ÉO GOOGLE DRIVE & SHEETS
# ===========================================

def carregar_credenciais(scopes: List[str]) -> Optional[Credentials]:
    """Carrega credenciais do servi√ßo do arquivo JSON."""
    try:
        credentials = Credentials.from_service_account_file('credenciais_google.json', scopes=scopes)
        return credentials
    except FileNotFoundError:
        print("‚ùå Arquivo 'credenciais_google.json' n√£o encontrado!")
        print("üìù Certifique-se de que o arquivo est√° no diret√≥rio atual")
        return None
    except Exception as e:
        print(f"‚ùå Erro ao carregar credenciais: {e}")
        return None


def configurar_google_sheets():
    """Configura conex√£o com Google Sheets"""
    scope = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'
    ]
    credentials = carregar_credenciais(scope)
    if not credentials:
        return None

    try:
        client = gspread.authorize(credentials)
        return client
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Google Sheets: {e}")
        return None


def configurar_google_drive_service(scopes: Optional[List[str]] = None):
    """Configura conex√£o com Google Drive e retorna servi√ßo da API."""
    scopes = scopes or ['https://www.googleapis.com/auth/drive.readonly']
    credentials = carregar_credenciais(scopes)
    if not credentials:
        return None

    try:
        service = build('drive', 'v3', credentials=credentials, cache_discovery=False)
        return service
    except HttpError as http_err:
        print(f"‚ùå Erro HTTP ao conectar no Google Drive: {http_err}")
    except Exception as e:
        print(f"‚ùå Erro ao configurar Google Drive: {e}")
    return None

def configurar_google_drive_service_completo():
    """Configura conex√£o com Google Drive com permiss√µes completas para mover arquivos."""
    scopes = [
        'https://www.googleapis.com/auth/drive',
        'https://www.googleapis.com/auth/drive.file'
    ]
    credentials = carregar_credenciais(scopes)
    if not credentials:
        return None

    try:
        service = build('drive', 'v3', credentials=credentials, cache_discovery=False)
        return service
    except HttpError as http_err:
        print(f"‚ùå Erro HTTP ao conectar no Google Drive: {http_err}")
    except Exception as e:
        print(f"‚ùå Erro ao configurar Google Drive: {e}")
    return None

def encontrar_ou_criar_pasta_processados(service, pasta_origem_id: str) -> str:
    """Usa a pasta 'cartoes-processados' espec√≠fica no Google Drive."""
    pasta_processados_id = "1fVFfewF2qUe-wgORQ5p15on5apOQ2G_i"
    
    try:
        # Verificar se a pasta existe e √© acess√≠vel
        pasta_info = service.files().get(fileId=pasta_processados_id, fields='id, name').execute()
        print(f"üìÅ Pasta encontrada: {pasta_info.get('name')}")
        return pasta_processados_id
        
    except Exception as e:
        print(f"‚ùå Erro ao acessar pasta 'cartoes-processados' (ID: {pasta_processados_id}): {e}")
        print("   Verifique se a pasta existe e o ID est√° correto")
        return None

def mover_arquivo_no_drive(service, arquivo_id: str, pasta_origem_id: str, pasta_destino_id: str, nome_arquivo: str) -> bool:
    """Move um arquivo de uma pasta para outra no Google Drive."""
    try:
        # Obter pais atuais do arquivo
        file_metadata = service.files().get(fileId=arquivo_id, fields='parents').execute()
        previous_parents = ",".join(file_metadata.get('parents'))
        
        # Mover arquivo (remover da pasta origem e adicionar √† pasta destino)
        service.files().update(
            fileId=arquivo_id,
            addParents=pasta_destino_id,
            removeParents=previous_parents,
            fields='id, parents'
        ).execute()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao mover arquivo {nome_arquivo}: {e}")
        return False

def obter_metadados_pasta_drive(service, pasta_id: str) -> dict:
    """Obt√©m metadados de todos os arquivos da pasta do Google Drive."""
    metadados = {}
    try:
        query = f"parents in '{pasta_id}' and trashed=false"
        campos = "nextPageToken, files(id, name, mimeType, size, modifiedTime)"
        
        page_token = None
        while True:
            response = service.files().list(
                q=query,
                fields=campos,
                pageToken=page_token
            ).execute()
            
            arquivos = response.get('files', [])
            for arquivo in arquivos:
                nome = arquivo.get('name', '')
                if nome.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.pdf')):
                    metadados[nome] = {
                        'id': arquivo['id'],
                        'nome': nome,
                        'mime_type': arquivo.get('mimeType', ''),
                        'tamanho': arquivo.get('size', '0'),
                        'modificado': arquivo.get('modifiedTime', '')
                    }
            
            page_token = response.get('nextPageToken')
            if not page_token:
                break
                
        print(f"üìã Metadados obtidos para {len(metadados)} arquivos")
        return metadados
        
    except Exception as e:
        print(f"‚ùå Erro ao obter metadados: {e}")
        return {}

def mover_arquivos_processados_drive(service, pasta_origem_id: str, metadados: dict):
    """Move arquivos processados (exceto gabarito) para pasta 'cartoes-processados'."""
    try:
        # Configurar servi√ßo com permiss√µes completas
        service_completo = configurar_google_drive_service_completo()
        if not service_completo:
            print("‚ùå N√£o foi poss√≠vel obter permiss√µes para mover arquivos")
            return
        
        # Encontrar ou criar pasta de processados
        pasta_processados_id = encontrar_ou_criar_pasta_processados(service_completo, pasta_origem_id)
        if not pasta_processados_id:
            print("‚ùå N√£o foi poss√≠vel criar pasta 'cartoes-processados'")
            return
        
        arquivos_movidos = 0
        
        # Mover todos os arquivos exceto o gabarito
        for nome_arquivo, dados in metadados.items():
            # Pular arquivo de gabarito
            if nome_arquivo.lower().startswith('gabarito'):
                continue
            
            # Mover arquivo
            if mover_arquivo_no_drive(
                service_completo, 
                dados['id'], 
                pasta_origem_id, 
                pasta_processados_id, 
                nome_arquivo
            ):
                arquivos_movidos += 1
        
        print(f"‚úÖ {arquivos_movidos} arquivos movidos para 'cartoes-processados' no Drive")
        
    except Exception as e:
        print(f"‚ùå Erro ao mover arquivos processados: {e}")


def sanitizar_nome_arquivo(nome: str, extensao_padrao: str = "") -> str:
    """Remove caracteres inv√°lidos e garante extens√£o v√°lida."""
    nome_limpo = re.sub(r'[<>:"/\\|?*]+', '_', nome).strip()
    if not nome_limpo:
        nome_limpo = 'arquivo'
    if extensao_padrao and not nome_limpo.lower().endswith(extensao_padrao.lower()):
        nome_limpo += extensao_padrao
    return nome_limpo


def baixar_cartoes_da_pasta_drive(service, pasta_id: str, destino: str, formatos_validos: Optional[Dict[str, str]] = None) -> List[str]:
    """Baixa todos os cart√µes (gabarito + alunos) de uma pasta do Google Drive."""
    if not service:
        print("‚ùå Servi√ßo do Google Drive n√£o configurado.")
        return []

    if not pasta_id:
        print("‚ùå ID da pasta do Google Drive n√£o informado.")
        return []

    os.makedirs(destino, exist_ok=True)
    formatos_validos = formatos_validos or DRIVE_MIME_TO_EXT
    arquivos_baixados: List[str] = []

    query = f"'{pasta_id}' in parents and trashed = false"
    campos = "nextPageToken, files(id, name, mimeType, modifiedTime)"
    page_token = None


    try:
        while True:
            response = service.files().list(
                q=query,
                fields=campos,
                pageToken=page_token
            ).execute()

            arquivos = response.get('files', [])
            if not arquivos:
                break

            for arquivo in arquivos:
                mime_type = arquivo.get('mimeType', '')
                nome_original = arquivo.get('name', 'arquivo')
                extensao_padrao = formatos_validos.get(mime_type, '')

                base, ext = os.path.splitext(nome_original)
                ext_final = ext.lower() if ext else extensao_padrao

                if not ext_final:
                    continue

                if ext_final and ext_final.lower() not in EXTENSOES_SUPORTADAS and ext_final not in formatos_validos.values():
                    print(f"‚ö†Ô∏è Ignorando '{nome_original}' (tipo n√£o suportado: {mime_type})")
                    continue

                nome_final = sanitizar_nome_arquivo(nome_original, extensao_padrao=ext_final)
                caminho_destino = os.path.join(destino, nome_final)

                # Resolver conflitos de nome
                contador = 1
                while os.path.exists(caminho_destino):
                    nome_sem_ext, ext_arquivo = os.path.splitext(nome_final)
                    caminho_destino = os.path.join(destino, f"{nome_sem_ext}_{contador}{ext_arquivo}")
                    contador += 1

                print(f"‚¨áÔ∏è Baixando: {nome_final}")
                request = service.files().get_media(fileId=arquivo['id'])
                fh = io.BytesIO()
                downloader = MediaIoBaseDownload(fh, request)

                done = False
                while not done:
                    status, done = downloader.next_chunk()
                    if status:
                        progresso = int(status.progress() * 100)
                        print(f"   Progresso: {progresso}%", end='\r')

                with open(caminho_destino, 'wb') as destino_arquivo:
                    destino_arquivo.write(fh.getbuffer())

                arquivos_baixados.append(caminho_destino)

            page_token = response.get('nextPageToken')
            if not page_token:
                break

    except HttpError as http_err:
        print(f"‚ùå Erro HTTP ao baixar arquivos do Drive: {http_err}")
        return []
    except Exception as e:
        print(f"‚ùå Erro inesperado ao baixar arquivos do Drive: {e}")
        return []

    print(f"‚úÖ Download conclu√≠do: {len(arquivos_baixados)} arquivos salvos em {destino}")
    return arquivos_baixados


def baixar_e_processar_pasta_drive(
    pasta_id: str,
    usar_gemini: bool = True,
    debug_mode: bool = False,
    enviar_para_sheets: bool = True,
    manter_pasta_temporaria: bool = False,
    mover_processados: bool = True,
    apenas_gabarito: bool = False
):
    """Workflow completo: baixa do Drive, processa cart√µes e envia resultados."""

    service = configurar_google_drive_service()
    if not service:
        print("‚ùå N√£o foi poss√≠vel configurar o Google Drive. Abortando.")
        return []

    pasta_temporaria = tempfile.mkdtemp(prefix="cartoes_drive_")
    print(f"üìÅ Pasta tempor√°ria criada: {pasta_temporaria}")

    try:
        # Obter metadados dos arquivos durante o download
        arquivos_metadata = obter_metadados_pasta_drive(service, pasta_id)
        arquivos_baixados = baixar_cartoes_da_pasta_drive(service, pasta_id, pasta_temporaria)
        
        if not arquivos_baixados:
            print("‚ùå Nenhum arquivo v√°lido foi baixado do Drive.")
            return []

        # Se √© apenas para gabarito, retornar o diret√≥rio tempor√°rio
        if apenas_gabarito:
            return pasta_temporaria

        if enviar_para_sheets:
            resultados = processar_pasta_gabaritos_com_sheets(
                pasta_temporaria,
                usar_gemini=usar_gemini,
                debug_mode=debug_mode
            )
        else:
            resultados = processar_pasta_gabaritos_sem_sheets(
                pasta_temporaria,
                usar_gemini=usar_gemini,
                debug_mode=debug_mode
            )

        # Mover arquivos processados se houve sucesso e est√° habilitado
        if resultados and mover_processados:
            print(f"\nüì¶ Movendo arquivos processados no Google Drive...")
            mover_arquivos_processados_drive(service, pasta_id, arquivos_metadata)

        return resultados

    finally:
        if manter_pasta_temporaria:
            print(f"üóÇÔ∏è Mantendo pasta tempor√°ria em: {pasta_temporaria}")
        else:
            shutil.rmtree(pasta_temporaria, ignore_errors=True)

def enviar_para_planilha(client, dados_aluno, resultado_comparacao, planilha_id=None):
    """Envia dados para Google Sheets"""
    try:
        if planilha_id:
            sheet = client.open_by_key(planilha_id)
            pass
        else:
            planilhas = client.list_spreadsheet_files()
            print(f"üìä Voc√™ tem {len(planilhas)} planilhas no Drive")
            
            nome_planilha = "Corre√ß√£o Cart√£o Resposta"
            try:
                sheet = client.open(nome_planilha)
                print(f"‚úÖ Planilha '{nome_planilha}' encontrada!")
            except gspread.SpreadsheetNotFound:
                print(f"üìÑ Criando nova planilha '{nome_planilha}'...")
                sheet = client.create(nome_planilha)
        
        # Usar primeira aba
        worksheet = sheet.sheet1
        
        # Verificar se h√° cabe√ßalho
        if not worksheet.get_all_values():
            cabecalho = [
                "Data", "Escola", "Nome completo", "Nascimento", "Turma", "Acertos", "Erros", "Porcentagem"
            ]
            worksheet.append_row(cabecalho)
            print("üìã Cabe√ßalho criado na planilha")
        
        # Preparar dados completos
        agora = datetime.now().strftime("%d/%m/%Y")
        
        # Garantir que os dados estejam no formato correto
        escola = dados_aluno.get("Escola", "N/A")
        if escola == "N/A" or not escola.strip():
            escola = "N/A"
        
        aluno = dados_aluno.get("Aluno", "N/A")
        if aluno == "N/A" or not aluno.strip():
            aluno = "N/A"
            
        nascimento = dados_aluno.get("Nascimento", "N/A")
        if nascimento == "N/A" or not nascimento.strip():
            nascimento = "N/A"
            
        turma = dados_aluno.get("Turma", "N/A")
        if turma == "N/A" or not turma.strip():
            turma = "N/A"
        
        linha_dados = [
            agora,
            escola,
            aluno, 
            nascimento,
            turma,
            resultado_comparacao["acertos"],
            resultado_comparacao["erros"],
            f"{resultado_comparacao['percentual']:.1f}%"
        ]
        
        # Adicionar linha
        worksheet.append_row(linha_dados)
        print(f"üìä Registro adicionado:")
        print(f"   üè´ Escola: {escola}")
        print(f"   üë§ Aluno: {aluno}")
        print(f"   üìÖ Nascimento: {nascimento}")
        print(f"   üìö Turma: {turma}")
        print(f"   üìä Resultado: {resultado_comparacao['acertos']} acertos | {resultado_comparacao['erros']} erros | {resultado_comparacao['percentual']:.1f}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao enviar dados para Google Sheets: {e}")
        return False

def criar_planilha_detalhada(client, dados_aluno, resultado_comparacao):
    """Cria aba detalhada com todas as quest√µes"""
    try:
        # Abrir planilha existente
        PLANILHA_ID = "1VJ0_w9eoQcc-ouBnRoq5lFQdR2fVZkqEtR-KArZMuvk"
        sheet = client.open_by_key(PLANILHA_ID)
        
        # Nome da nova aba
        nome_aba = f"Detalhes_{dados_aluno['Aluno'].replace(' ', '_')[:15]}_{datetime.now().strftime('%d%m_%H%M')}"
        
        # Criar nova aba
        worksheet = sheet.add_worksheet(title=nome_aba, rows=35, cols=6)
        
        # Cabe√ßalho da aba detalhada
        cabecalho_detalhado = [
            "Quest√£o", "Gabarito", "Resposta Aluno", "Status", "Resultado", "Observa√ß√£o"
        ]
        worksheet.append_row(cabecalho_detalhado)
        
        # Dados detalhados
        for detalhe in resultado_comparacao["detalhes"]:
            linha = [
                detalhe["questao"],
                detalhe["gabarito"],
                detalhe["aluno"],
                detalhe["status"],
                "ACERTO" if detalhe["status"] == "‚úì" else "ERRO",
                "" if detalhe["status"] == "‚úì" else f"Esperado: {detalhe['gabarito']}, Marcado: {detalhe['aluno']}"
            ]
            worksheet.append_row(linha)
        
        print(f"‚úÖ Planilha detalhada '{nome_aba}' criada com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar planilha detalhada: {e}")
        return False

def comparar_respostas(respostas_gabarito, respostas_aluno):
    """Compara as respostas do gabarito com as do aluno"""
    if len(respostas_gabarito) != len(respostas_aluno):
        print("‚ö†Ô∏è  ATEN√á√ÉO: N√∫mero de quest√µes diferentes entre gabarito e resposta do aluno!")
        min_questoes = min(len(respostas_gabarito), len(respostas_aluno))
    else:
        min_questoes = len(respostas_gabarito)
    
    acertos = 0
    erros = 0
    detalhes = []
    
    for i in range(min_questoes):
        questao = i + 1
        gabarito = respostas_gabarito[i] if i < len(respostas_gabarito) else "N/A"
        aluno = respostas_aluno[i] if i < len(respostas_aluno) else "N/A"
        
        if gabarito == aluno:
            status = "‚úì"
            acertos += 1
        else:
            status = "‚úó"
            erros += 1
        
        detalhes.append({
            "questao": questao,
            "gabarito": gabarito,
            "aluno": aluno,
            "status": status
        })
    
    percentual = (acertos / min_questoes * 100) if min_questoes > 0 else 0
    
    return {
        "total": min_questoes,
        "acertos": acertos,
        "erros": erros,
        "percentual": percentual,
        "detalhes": detalhes,
        "questoes_detectadas": min_questoes
    }

def exibir_resultados(dados_aluno, resultado):
    """Exibe os resultados formatados"""
    print("\n" + "="*50)
    print("         CORRE√á√ÉO DO CART√ÉO RESPOSTA")
    print("="*50)
    
    print("\n=== DADOS DO ALUNO ===")
    for campo, valor in dados_aluno.items():
        print(f"{campo}: {valor}")
    
    print("\n=== RESULTADO GERAL ===")
    print(f"Total de quest√µes: {resultado['total']}")
    print(f"Acertos: {resultado['acertos']} ‚úì")
    print(f"Erros: {resultado['erros']} ‚úó")
    print(f"Percentual de acerto: {resultado['percentual']:.2f}%")
    
    print("\n=== DETALHAMENTO POR QUEST√ÉO ===")
    print("Quest√£o | Gabarito | Aluno | Status")
    print("-" * 35)
    
    for detalhe in resultado["detalhes"]:
        print(f"   {detalhe['questao']:02d}   |    {detalhe['gabarito']}     |   {detalhe['aluno']}   |   {detalhe['status']}")
    
    # Mostrar apenas quest√µes erradas
    erros_detalhados = [d for d in resultado["detalhes"] if d["status"] == "‚úó"]
    if erros_detalhados:
        print("\n=== QUEST√ïES ERRADAS ===")
        for erro in erros_detalhados:
            print(f"Quest√£o {erro['questao']:02d}: Gabarito {erro['gabarito']} ‚â† Aluno {erro['aluno']} ‚úó")

def exibir_gabarito_simples(respostas_gabarito):
    """Exibe o gabarito em formato simples: 1-A, 2-B, 3-C"""
    print("\nüìã GABARITO DAS QUEST√ïES:")
    print("=" * 30)
    
    # Agrupar as quest√µes em linhas de 10 para melhor visualiza√ß√£o
    for i in range(0, len(respostas_gabarito), 10):
        linha = []
        for j in range(i, min(i + 10, len(respostas_gabarito))):
            if respostas_gabarito[j] != '?':
                linha.append(f"{j+1}-{respostas_gabarito[j]}")
            else:
                linha.append(f"{j+1}-?")
        print("  ".join(linha))
    
    print("=" * 30)

def processar_apenas_gabarito(drive_folder_id: str = "13KIDX3GtQWxIxlAsX-2XS0ypJvOnnqZX", debug_mode: bool = False):
    """Processa apenas o gabarito e exibe as respostas em formato simples"""
    print("üìã PROCESSANDO APENAS GABARITO")
    print("=" * 40)
    
    try:
        # Baixar arquivos do Google Drive
        print(f"üì• Baixando arquivos da pasta do Drive: {drive_folder_id}")
        diretorio_temp = baixar_e_processar_pasta_drive(
            pasta_id=drive_folder_id,
            usar_gemini=False,
            debug_mode=debug_mode,
            enviar_para_sheets=False,
            manter_pasta_temporaria=True,
            mover_processados=False,
            apenas_gabarito=True
        )
        
        if not diretorio_temp:
            print("‚ùå Erro ao baixar arquivos do Drive")
            return
        
        # Procurar arquivo de gabarito
        arquivos = [f for f in os.listdir(diretorio_temp) 
                    if f.lower().endswith(EXTENSOES_SUPORTADAS)]
        
        gabarito_file = None
        for arquivo in arquivos:
            if 'gabarito' in arquivo.lower():
                gabarito_file = arquivo
                break
        
        if not gabarito_file:
            print("‚ùå Arquivo de gabarito n√£o encontrado (deve conter 'gabarito' no nome)")
            return
        
        print(f"üìã Gabarito encontrado: {gabarito_file}")
        
        # Preprocessar gabarito
        gabarito_path = os.path.join(diretorio_temp, gabarito_file)
        gabarito_img = preprocessar_arquivo(gabarito_path, "gabarito")
        
        # Detectar respostas do gabarito
        if "page_" in gabarito_img and (gabarito_img.endswith(".png") or gabarito_img.endswith(".jpg")):
            respostas_gabarito = detectar_respostas_pdf(gabarito_img, debug=debug_mode)
        else:
            respostas_gabarito = detectar_respostas(gabarito_img, debug=debug_mode)
        
        questoes_gabarito = sum(1 for r in respostas_gabarito if r != '?')
        print(f"‚úÖ Gabarito processado: {questoes_gabarito}/52 quest√µes detectadas")
        
        # Exibir gabarito em formato simples
        exibir_gabarito_simples(respostas_gabarito)
        
        if questoes_gabarito < 40:
            print("‚ö†Ô∏è ATEN√á√ÉO: Poucas quest√µes detectadas no gabarito.")
        
        # Limpar arquivos tempor√°rios
        if os.path.exists(diretorio_temp):
            shutil.rmtree(diretorio_temp, ignore_errors=True)
        
    except Exception as e:
        print(f"‚ùå Erro ao processar gabarito: {e}")

# ===========================================
# PROCESSAMENTO EM LOTE
# ===========================================

def processar_pasta_gabaritos(diretorio: str = "./gabaritos", usar_gemini: bool = True, debug_mode: bool = False):
    """
    Processa todos os arquivos de uma pasta com cart√µes (gabarito + alunos)
    - 1 gabarito (template) para comparar com m√∫ltiplos alunos
    - Sem compara√ß√µes desnecess√°rias de dados
    
    Args:
        diretorio: Caminho da pasta contendo gabarito e cart√µes dos alunos
        usar_gemini: Se deve usar Gemini para cabe√ßalho
        debug_mode: Se deve mostrar debug detalhado
        
    Returns:
        Lista de resultados de cada aluno processado
    """
    
    print("üöÄ SISTEMA DE CORRE√á√ÉO - PASTA GABARITOS")
    print("=" * 60)
    
    diretorio_gabaritos = diretorio
    
    if not os.path.exists(diretorio_gabaritos):
        print(f"‚ùå ERRO: Pasta '{diretorio_gabaritos}' n√£o encontrada!")
        print("üí° Crie a pasta informada e adicione os arquivos do gabarito e dos alunos")
        return []
    
    # Configurar suporte a PDF se dispon√≠vel
    if PDF_PROCESSOR_AVAILABLE:
        print("\nüîß Configurando suporte a PDF...")
        pdf_ok = setup_pdf_support()
        if not pdf_ok:
            print("‚ö†Ô∏è Suporte a PDF limitado - apenas imagens ser√£o processadas")
    
    # Listar arquivos suportados na pasta gabaritos
    print(f"\nüìÅ Analisando arquivos na pasta: {os.path.abspath(diretorio_gabaritos)}")
    arquivos = listar_arquivos_suportados(diretorio_gabaritos)
    
    if not arquivos['todos']:
        print("‚ùå Nenhum arquivo suportado encontrado na pasta gabaritos!")
        print("üí° Formatos suportados: PDF, PNG, JPG, JPEG, BMP, TIFF")
        return []
    
    print(f"‚úÖ Encontrados {len(arquivos['todos'])} arquivos:")
    for arquivo in arquivos['todos']:
        print(f"   üìÑ {arquivo}")
    
    # ===========================================
    # IDENTIFICAR GABARITO (L√ìGICA SIMPLIFICADA)
    # ===========================================
    
    print("\nüìã Identificando arquivo de gabarito...")
    gabarito_file = None
    
    # Buscar por qualquer arquivo que comece com "gabarito" (case insensitive)
    for arquivo in arquivos['todos']:
        if arquivo.lower().startswith('gabarito'):
            gabarito_file = arquivo
            break
    
    if not gabarito_file:
        print("‚ùå ERRO: Nenhum arquivo 'gabarito.*' encontrado!")
        print("üí° Renomeie o arquivo do gabarito para: gabarito.png, gabarito.pdf, etc.")
        return []
    
    print(f"‚úÖ Gabarito identificado: {gabarito_file}")
    
    # ===========================================
    # IDENTIFICAR ARQUIVOS DOS ALUNOS (L√ìGICA SIMPLIFICADA)
    # ===========================================
    
    print("\nüë• Identificando arquivos dos alunos...")
    
    # TODOS os arquivos que N√ÉO come√ßam com "gabarito" s√£o alunos
    arquivos_alunos = [f for f in arquivos['todos'] if not f.lower().startswith('gabarito')]
    
    if not arquivos_alunos:
        print("‚ùå ERRO: Nenhum arquivo de aluno encontrado!")
        print("üí° Adicione arquivos dos alunos na pasta gabaritos (qualquer nome exceto gabarito.*)")
        return []
    
    print(f"‚úÖ Encontrados {len(arquivos_alunos)} alunos para processar:")
    for i, aluno in enumerate(arquivos_alunos, 1):
        print(f"   {i:02d}. {aluno}")
    
    # ===========================================
    # CONFIGURAR GEMINI
    # ===========================================
    
    model_gemini = None
    if usar_gemini:
        try:
            model_gemini = configurar_gemini()
        except Exception as e:
            print(f"‚ùå Erro ao configurar Gemini: {e}")
            usar_gemini = False
    
    # ===========================================
    # PROCESSAR GABARITO (UMA VEZ APENAS)
    # ===========================================
    
    print(f"\n{'='*60}")
    print("üìã PROCESSANDO GABARITO")
    print(f"{'='*60}")
    
    try:
        # Preprocessar gabarito
        gabarito_path = os.path.join(diretorio_gabaritos, gabarito_file)
        gabarito_img = preprocessar_arquivo(gabarito_path, "gabarito")
        
        # Detectar respostas do gabarito
        if "page_" in gabarito_img and (gabarito_img.endswith(".png") or gabarito_img.endswith(".jpg")):
            respostas_gabarito = detectar_respostas_pdf(gabarito_img, debug=debug_mode)
        else:
            respostas_gabarito = detectar_respostas(gabarito_img, debug=debug_mode)
        
        questoes_gabarito = sum(1 for r in respostas_gabarito if r != '?')
        print(f"‚úÖ Gabarito processado: {questoes_gabarito}/52 quest√µes detectadas")
        
        if questoes_gabarito < 40:
            print("‚ö†Ô∏è ATEN√á√ÉO: Poucas quest√µes detectadas no gabarito.")
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO ao processar gabarito: {e}")
        return []
    
    # ===========================================
    # PROCESSAR TODOS OS ALUNOS
    # ===========================================
    
    resultados_lote = []
    
    print(f"\n{'='*60}")
    print(f"üë• PROCESSANDO {len(arquivos_alunos)} ALUNOS")
    print(f"{'='*60}")
    
    for i, aluno_file in enumerate(arquivos_alunos, 1):
        print(f"\nüîÑ [{i:02d}/{len(arquivos_alunos)}] Processando: {aluno_file}")
        print("-" * 50)
        
        try:
            # Preprocessar arquivo do aluno
            aluno_path = os.path.join(diretorio_gabaritos, aluno_file)
            aluno_img = preprocessar_arquivo(aluno_path, f"aluno_{i}")
            
            # Extrair dados do cabe√ßalho (opcional com Gemini)
            dados_aluno = {
                "Aluno": os.path.splitext(aluno_file)[0],
                "Escola": "N/A",
                "Nascimento": "N/A", 
                "Turma": "N/A"
            }
            
            if usar_gemini and model_gemini:
                try:
                    dados_extraidos = extrair_cabecalho_com_fallback(model_gemini, aluno_img)
                    if dados_extraidos:
                        # Mapear chaves min√∫sculas do Gemini para mai√∫sculas do sistema
                        mapeamento = {
                            "escola": "Escola",
                            "aluno": "Aluno", 
                            "turma": "Turma",
                            "nascimento": "Nascimento"
                        }
                        
                        # Atualizar dados com mapeamento correto
                        for chave_gemini, chave_sistema in mapeamento.items():
                            if chave_gemini in dados_extraidos and dados_extraidos[chave_gemini] and dados_extraidos[chave_gemini] != "N/A":
                                dados_aluno[chave_sistema] = dados_extraidos[chave_gemini]
                        
                        print(f"‚úÖ Dados extra√≠dos: {dados_aluno['Aluno']} ({dados_aluno['Escola']})")
                except Exception as e:
                    print(f"‚ö†Ô∏è Gemini falhou, usando nome do arquivo")
            
            # Detectar respostas do aluno
            if "page_" in aluno_img and (aluno_img.endswith(".png") or aluno_img.endswith(".jpg")):
                respostas_aluno = detectar_respostas_pdf(aluno_img, debug=debug_mode)
            else:
                respostas_aluno = detectar_respostas(aluno_img, debug=debug_mode)
            
            questoes_aluno = sum(1 for r in respostas_aluno if r != '?')
            
            # Calcular resultado
            resultado = comparar_respostas(respostas_gabarito, respostas_aluno)
            
            # Armazenar resultado com dados completos
            resultado_completo = {
                "arquivo": aluno_file,
                "dados_completos": dados_aluno,  # Dados completos do cabe√ßalho
                "acertos": resultado['acertos'],
                "total": resultado['total'],
                "percentual": resultado['percentual'],
                "questoes_detectadas": questoes_aluno
            }
            resultados_lote.append(resultado_completo)
            
            print(f"üìä Resultado: {resultado['acertos']}/{resultado['total']} acertos ({resultado['percentual']:.1f}%)")
            
        except Exception as e:
            print(f"‚ùå ERRO ao processar {aluno_file}: {e}")
            resultado_erro = {
                "arquivo": aluno_file,
                "dados_completos": {
                    "Aluno": os.path.splitext(aluno_file)[0],
                    "Escola": "N/A",
                    "Nascimento": "N/A",
                    "Turma": "N/A"
                },
                "acertos": 0,
                "total": 52,
                "percentual": 0.0,
                "questoes_detectadas": 0,
                "erro": str(e)
            }
            resultados_lote.append(resultado_erro)
    
    # ===========================================
    # RELAT√ìRIO FINAL SIMPLIFICADO
    # ===========================================
    
    print(f"\n{'='*60}")
    print("üìä RELAT√ìRIO FINAL")
    print(f"{'='*60}")
    
    if resultados_lote:
        print(f"\n=== TOTAL DE ALUNOS: {len(resultados)} + RESULTADOS ===")
        
        # Ordenar por percentual (decrescente)
        resultados_ordenados = sorted(resultados_lote, key=lambda x: x["percentual"], reverse=True)
        
        for i, r in enumerate(resultados_ordenados, 1):
            dados = r["dados_completos"]
            nome = dados["Aluno"]
            escola = dados["Escola"]
            nascimento = dados["Nascimento"]
            turma = dados["Turma"]
            acertos = r["acertos"]
            
            status = "‚ùå" if "erro" in r else "‚úÖ"
            
            # Formato: aluno X (nome completo, escola, nascimento, turma) - acertou Y quest√µes
            print(f"{status} aluno {i} ({nome}, {escola}, {nascimento}, {turma}) - acertou {acertos} quest√µes")
        
        # Estat√≠sticas
        resultados_validos = [r for r in resultados_lote if "erro" not in r]
        if resultados_validos:
            acertos = [r["acertos"] for r in resultados_validos]
            percentuais = [r["percentual"] for r in resultados_validos]
            
            print(f"\n=== ESTAT√çSTICAS ===")
            print(f"M√©dia de acertos: {sum(acertos)/len(acertos):.1f}/52 quest√µes")
            print(f"M√©dia percentual: {sum(percentuais)/len(percentuais):.1f}%")
    
    # ===========================================
    # ENVIAR PARA GOOGLE SHEETS (OPCIONAL)
    # ===========================================
    
    print(f"\nüì§ Enviando resultados para Google Sheets...")
    try:
        client = configurar_google_sheets()
        if client:
            sucessos = 0
            for resultado in resultados_lote:
                if "erro" not in resultado:
                    try:
                        dados_completos = resultado["dados_completos"]
                        dados_simples = {
                            "Aluno": dados_completos["Aluno"], 
                            "Escola": dados_completos["Escola"],
                            "Nascimento": dados_completos["Nascimento"],
                            "Turma": dados_completos["Turma"]
                        }
                        resultado_comparacao = {
                            "acertos": resultado["acertos"],
                            "erros": resultado["total"] - resultado["acertos"],
                            "percentual": resultado["percentual"]
                        }
                        enviar_para_planilha(client, dados_simples, resultado_comparacao)
                        sucessos += 1
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erro ao enviar {dados_completos['Aluno']}: {e}")
            print(f"‚úÖ {sucessos}/{len(resultados_lote)} resultados enviados!")
        else:
            print("‚ùå N√£o foi poss√≠vel conectar ao Google Sheets")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao enviar para Sheets: {e}")
    
    return resultados_lote

def processar_lote_alunos(diretorio=".", usar_gemini=True, debug_mode=False):
    """
    Processa m√∫ltiplos cart√µes de alunos em lote
    
    Args:
        diretorio: Diret√≥rio contendo os arquivos
        usar_gemini: Se deve usar Gemini para cabe√ßalho
        debug_mode: Se deve mostrar debug detalhado
        
    Returns:
        Lista de resultados de cada aluno processado
    """
    
    print("üöÄ SISTEMA DE CORRE√á√ÉO EM LOTE - M√öLTIPLOS ALUNOS")
    print("=" * 60)
    
    # Configurar suporte a PDF se dispon√≠vel
    if PDF_PROCESSOR_AVAILABLE:
        print("\nüîß Configurando suporte a PDF...")
        pdf_ok = setup_pdf_support()
        if not pdf_ok:
            print("‚ö†Ô∏è Suporte a PDF limitado - apenas imagens ser√£o processadas")
    
    # Listar arquivos suportados no diret√≥rio
    print(f"\nüìÅ Analisando arquivos no diret√≥rio: {os.path.abspath(diretorio)}")
    arquivos = listar_arquivos_suportados(diretorio)
    
    if not arquivos['todos']:
        print("‚ùå Nenhum arquivo suportado encontrado!")
        print("üí° Formatos suportados: PDF, PNG, JPG, JPEG, BMP, TIFF")
        return []
    
    print(f"‚úÖ Encontrados {len(arquivos['todos'])} arquivos suportados:")
    if arquivos['imagens']:
        print(f"   üñºÔ∏è Imagens: {', '.join(arquivos['imagens'])}")
    if arquivos['pdfs']:
        print(f"   üìÑ PDFs: {', '.join(arquivos['pdfs'])}")
    
    # ===========================================
    # IDENTIFICAR GABARITO
    # ===========================================
    
    print("\nüìã Identificando arquivo de gabarito...")
    gabarito_file = None
    
    # Buscar arquivo do gabarito (priorizar nomes espec√≠ficos)
    gabarito_candidates = [
        "gabarito.pdf", "gabarito.png", "gabarito.jpg",
        "resposta_gabarito.pdf", "resposta_gabarito.png", "resposta_gabarito.jpg",
        "resposta_gabarito_teste.pdf", "master.pdf", "template.pdf"
    ]
    
    for candidate in gabarito_candidates:
        if candidate in arquivos['todos']:
            gabarito_file = candidate
            break
    
    # Se n√£o encontrou pelos nomes, usar o primeiro arquivo (assumindo que o primeiro √© gabarito)
    if not gabarito_file and arquivos['todos']:
        gabarito_file = sorted(arquivos['todos'])[0]
        print(f"‚ö†Ô∏è Gabarito n√£o identificado pelos nomes padr√£o. Usando: {gabarito_file}")
    
    if not gabarito_file:
        print("‚ùå ERRO: Nenhum arquivo de gabarito encontrado!")
        print("üí° Renomeie o arquivo do gabarito para: gabarito.pdf ou gabarito.png")
        return []
    
    print(f"‚úÖ Gabarito identificado: {gabarito_file}")
    
    # ===========================================
    # IDENTIFICAR ARQUIVOS DOS ALUNOS
    # ===========================================
    
    print("\nüë• Identificando arquivos dos alunos...")
    
    # Todos os arquivos exceto o gabarito s√£o considerados alunos
    arquivos_alunos = [f for f in arquivos['todos'] if f != gabarito_file]
    
    if not arquivos_alunos:
        print("‚ùå ERRO: Nenhum arquivo de aluno encontrado!")
        print("üí° Adicione arquivos dos alunos na pasta (qualquer nome, exceto gabarito)")
        return []
    
    print(f"‚úÖ Encontrados {len(arquivos_alunos)} alunos para processar:")
    for i, aluno in enumerate(arquivos_alunos, 1):
        print(f"   {i:02d}. {aluno}")
    
    # ===========================================
    # CONFIGURAR GEMINI E GOOGLE SHEETS
    # ===========================================
    
    model_gemini = None
    if usar_gemini:
        print("\nü§ñ Configurando Gemini...")
        try:
            model_gemini = configurar_gemini()
            print("‚úÖ Gemini configurado com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro ao configurar Gemini: {e}")
            print("‚ö†Ô∏è Continuando sem Gemini (apenas OCR)")
            usar_gemini = False
    
    # ===========================================
    # PROCESSAR GABARITO (UMA VEZ APENAS)
    # ===========================================
    
    print(f"\n{'='*60}")
    print("üìã PROCESSANDO GABARITO")
    print(f"{'='*60}")
    
    try:
        # Preprocessar gabarito
        gabarito_img = preprocessar_arquivo(gabarito_file, "gabarito")
        
        if debug_mode:
            print("\n=== DEBUG GABARITO ===")
        
        # Detectar respostas do gabarito
        if "page_" in gabarito_img and (gabarito_img.endswith(".png") or gabarito_img.endswith(".jpg")):
            print("üîç Usando detec√ß√£o especializada para PDF...")
            respostas_gabarito = detectar_respostas_pdf(gabarito_img, debug=debug_mode)
        else:
            respostas_gabarito = detectar_respostas(gabarito_img, debug=debug_mode)
        
        questoes_gabarito = sum(1 for r in respostas_gabarito if r != '?')
        print(f"‚úÖ Gabarito processado: {questoes_gabarito}/52 quest√µes detectadas")
        
        # Exibir gabarito em formato simples
        exibir_gabarito_simples(respostas_gabarito)
        
        if questoes_gabarito < 40:
            print("‚ö†Ô∏è ATEN√á√ÉO: Poucas quest√µes detectadas no gabarito. Verifique a qualidade da imagem.")
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO ao processar gabarito: {e}")
        return []
    
    # ===========================================
    # PROCESSAR TODOS OS ALUNOS
    # ===========================================
    
    resultados_lote = []
    alunos_processados = 0
    alunos_com_erro = 0
    
    print(f"\n{'='*60}")
    print(f"üë• PROCESSANDO {len(arquivos_alunos)} ALUNOS")
    print(f"{'='*60}")
    
    for i, aluno_file in enumerate(arquivos_alunos, 1):
        print(f"\nüîÑ [{i:02d}/{len(arquivos_alunos)}] Processando: {aluno_file}")
        print("-" * 50)
        
        try:
            # Preprocessar arquivo do aluno
            aluno_img = preprocessar_arquivo(aluno_file, f"aluno_{i}")
            
            # Extrair dados do cabe√ßalho
            dados_aluno = {"Escola": "N/A", "Aluno": "N/A", "Nascimento": "N/A", "Turma": "N/A"}
            
            if usar_gemini and model_gemini:
                try:
                    dados_extraidos = extrair_cabecalho_com_fallback(model_gemini, aluno_img)
                    if dados_extraidos:
                        dados_aluno.update(dados_extraidos)
                        print("‚úÖ Dados extra√≠dos pelo Gemini:")
                        for campo, valor in dados_extraidos.items():
                            print(f"   üìù {campo}: {valor}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro no Gemini para {aluno_file}: {e}")
                    dados_aluno["Aluno"] = os.path.splitext(aluno_file)[0]  # Usar nome do arquivo
            else:
                dados_aluno["Aluno"] = os.path.splitext(aluno_file)[0]  # Usar nome do arquivo
            
            # Detectar respostas do aluno
            if "page_" in aluno_img and (aluno_img.endswith(".png") or aluno_img.endswith(".jpg")):
                respostas_aluno = detectar_respostas_pdf(aluno_img, debug=debug_mode)
            else:
                respostas_aluno = detectar_respostas(aluno_img, debug=debug_mode)
            
            questoes_aluno = sum(1 for r in respostas_aluno if r != '?')
            print(f"‚úÖ Respostas processadas: {questoes_aluno}/52 quest√µes detectadas")
            
            # Calcular resultado
            resultado = comparar_respostas(respostas_gabarito, respostas_aluno)
            
            # Armazenar resultado
            resultado_completo = {
                "arquivo": aluno_file,
                "dados": dados_aluno,
                "respostas": respostas_aluno,
                "resultado": resultado,
                "questoes_detectadas": questoes_aluno
            }
            resultados_lote.append(resultado_completo)
            
            print(f"üìä Resultado: {resultado['acertos']}/{resultado['total']} acertos ({resultado['percentual']:.1f}%)")
            alunos_processados += 1
            
        except Exception as e:
            print(f"‚ùå ERRO ao processar {aluno_file}: {e}")
            alunos_com_erro += 1
            # Adicionar resultado de erro
            resultado_erro = {
                "arquivo": aluno_file,
                "dados": {"Aluno": os.path.splitext(aluno_file)[0], "Erro": str(e)},
                "respostas": ['?'] * 52,
                "resultado": {"total": 52, "acertos": 0, "erros": 52, "percentual": 0.0},
                "questoes_detectadas": 0
            }
            resultados_lote.append(resultado_erro)
    
    # ===========================================
    # RELAT√ìRIO FINAL E ESTAT√çSTICAS
    # ===========================================
    
    print(f"\n{'='*60}")
    print("üìä RELAT√ìRIO FINAL DO LOTE")
    print(f"{'='*60}")
    
    print(f"\n=== ESTAT√çSTICAS GERAIS ===")
    print(f"Total de alunos: {len(arquivos_alunos)}")
    print(f"Processados com sucesso: {alunos_processados} ‚úÖ")
    print(f"Erros de processamento: {alunos_com_erro} ‚ùå")
    
    if resultados_lote:
        # Calcular estat√≠sticas
        acertos_totais = [r["resultado"]["acertos"] for r in resultados_lote if "Erro" not in r["dados"]]
        percentuais = [r["resultado"]["percentual"] for r in resultados_lote if "Erro" not in r["dados"]]
        
        if acertos_totais:
            print(f"\n=== ESTAT√çSTICAS DE DESEMPENHO ===")
            print(f"M√©dia de acertos: {sum(acertos_totais)/len(acertos_totais):.1f}/52")
            print(f"M√©dia percentual: {sum(percentuais)/len(percentuais):.1f}%")
            print(f"Melhor resultado: {max(acertos_totais)}/52 ({max(percentuais):.1f}%)")
            print(f"Pior resultado: {min(acertos_totais)}/52 ({min(percentuais):.1f}%)")
        
        # Mostrar ranking
        print(f"\n=== RANKING DOS ALUNOS ===")
        resultados_validos = [r for r in resultados_lote if "Erro" not in r["dados"]]
        resultados_ordenados = sorted(resultados_validos, key=lambda x: x["resultado"]["percentual"], reverse=True)
        
        for i, r in enumerate(resultados_ordenados[:10], 1):  # Top 10
            nome = r["dados"].get("Aluno", "N/A")
            acertos = r["resultado"]["acertos"]
            percentual = r["resultado"]["percentual"]
            print(f"   {i:02d}. {nome:<25} | {acertos:02d}/52 | {percentual:5.1f}%")
        
        if len(resultados_ordenados) > 10:
            print(f"   ... e mais {len(resultados_ordenados) - 10} alunos")
    
    return resultados_lote

def processar_pasta_gabaritos_sem_sheets(diretorio: str = "./gabaritos", usar_gemini: bool = True, debug_mode: bool = False):
    """
    Vers√£o da fun√ß√£o que N√ÉO tenta enviar para Google Sheets
    (evita problema de cota do Drive)
    """
    
    print("üöÄ SISTEMA DE CORRE√á√ÉO - PASTA GABARITOS (SEM GOOGLE SHEETS)")
    print("=" * 60)
    
    diretorio_gabaritos = diretorio
    
    if not os.path.exists(diretorio_gabaritos):
        print(f"‚ùå ERRO: Pasta '{diretorio_gabaritos}' n√£o encontrada!")
        print("üí° Crie a pasta informada e adicione os arquivos do gabarito e dos alunos")
        return []
    
    # Configurar suporte a PDF se dispon√≠vel
    if PDF_PROCESSOR_AVAILABLE:
        print("\nüîß Configurando suporte a PDF...")
        pdf_ok = setup_pdf_support()
        if not pdf_ok:
            print("‚ö†Ô∏è Suporte a PDF limitado - apenas imagens ser√£o processadas")
    
    # Listar arquivos suportados na pasta gabaritos
    print(f"\nüìÅ Analisando arquivos na pasta: {os.path.abspath(diretorio_gabaritos)}")
    arquivos = listar_arquivos_suportados(diretorio_gabaritos)
    
    if not arquivos['todos']:
        print("‚ùå Nenhum arquivo suportado encontrado na pasta gabaritos!")
        print("üí° Formatos suportados: PDF, PNG, JPG, JPEG, BMP, TIFF")
        return []
    
    print(f"‚úÖ Encontrados {len(arquivos['todos'])} arquivos:")
    for arquivo in arquivos['todos']:
        print(f"   üìÑ {arquivo}")
    
    # ===========================================
    # IDENTIFICAR GABARITO (L√ìGICA SIMPLIFICADA)
    # ===========================================
    
    print("\nüìã Identificando arquivo de gabarito...")
    gabarito_file = None
    
    # Buscar por qualquer arquivo que comece com "gabarito" (case insensitive)
    for arquivo in arquivos['todos']:
        if arquivo.lower().startswith('gabarito'):
            gabarito_file = arquivo
            break
    
    if not gabarito_file:
        print("‚ùå ERRO: Nenhum arquivo 'gabarito.*' encontrado!")
        print("üí° Renomeie o arquivo do gabarito para: gabarito.png, gabarito.pdf, etc.")
        return []
    
    print(f"‚úÖ Gabarito identificado: {gabarito_file}")
    
    # ===========================================
    # IDENTIFICAR ARQUIVOS DOS ALUNOS (L√ìGICA SIMPLIFICADA)
    # ===========================================
    
    print("\nüë• Identificando arquivos dos alunos...")
    
    # TODOS os arquivos que N√ÉO come√ßam com "gabarito" s√£o alunos
    arquivos_alunos = [f for f in arquivos['todos'] if not f.lower().startswith('gabarito')]
    
    if not arquivos_alunos:
        print("‚ùå ERRO: Nenhum arquivo de aluno encontrado!")
        print("üí° Adicione arquivos dos alunos na pasta gabaritos (qualquer nome exceto gabarito.*)")
        return []
    
    print(f"‚úÖ Encontrados {len(arquivos_alunos)} alunos para processar:")
    for i, aluno in enumerate(arquivos_alunos, 1):
        print(f"   {i:02d}. {aluno}")
    
    # ===========================================
    # CONFIGURAR GEMINI
    # ===========================================
    
    model_gemini = None
    if usar_gemini:
        try:
            model_gemini = configurar_gemini()
        except Exception as e:
            print(f"‚ùå Erro ao configurar Gemini: {e}")
            usar_gemini = False
    
    # ===========================================
    # PROCESSAR GABARITO (UMA VEZ APENAS)
    # ===========================================
    
    print(f"\n{'='*60}")
    print("üìã PROCESSANDO GABARITO")
    print(f"{'='*60}")
    
    try:
        # Preprocessar gabarito
        gabarito_path = os.path.join(diretorio_gabaritos, gabarito_file)
        gabarito_img = preprocessar_arquivo(gabarito_path, "gabarito")
        
        # Detectar respostas do gabarito
        if "page_" in gabarito_img and (gabarito_img.endswith(".png") or gabarito_img.endswith(".jpg")):
            respostas_gabarito = detectar_respostas_pdf(gabarito_img, debug=debug_mode)
        else:
            respostas_gabarito = detectar_respostas(gabarito_img, debug=debug_mode)
        
        questoes_gabarito = sum(1 for r in respostas_gabarito if r != '?')
        print(f"‚úÖ Gabarito processado: {questoes_gabarito}/52 quest√µes detectadas")
        
        if questoes_gabarito < 40:
            print("‚ö†Ô∏è ATEN√á√ÉO: Poucas quest√µes detectadas no gabarito.")
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO ao processar gabarito: {e}")
        return []
    
    # ===========================================
    # PROCESSAR TODOS OS ALUNOS
    # ===========================================
    
    resultados_lote = []
    
    print(f"\n{'='*60}")
    print(f"üë• PROCESSANDO {len(arquivos_alunos)} ALUNOS")
    print(f"{'='*60}")
    
    for i, aluno_file in enumerate(arquivos_alunos, 1):
        print(f"\nüîÑ [{i:02d}/{len(arquivos_alunos)}] Processando: {aluno_file}")
        print("-" * 50)
        
        try:
            # Preprocessar arquivo do aluno
            aluno_path = os.path.join(diretorio_gabaritos, aluno_file)
            aluno_img = preprocessar_arquivo(aluno_path, f"aluno_{i}")
            
            # Extrair dados do cabe√ßalho (opcional com Gemini)
            dados_aluno = {
                "Aluno": os.path.splitext(aluno_file)[0],
                "Escola": "N/A",
                "Nascimento": "N/A", 
                "Turma": "N/A"
            }
            
            if usar_gemini and model_gemini:
                try:
                    dados_extraidos = extrair_cabecalho_com_fallback(model_gemini, aluno_img)
                    if dados_extraidos:
                        # Mapear chaves min√∫sculas do Gemini para mai√∫sculas do sistema
                        mapeamento = {
                            "escola": "Escola",
                            "aluno": "Aluno", 
                            "turma": "Turma",
                            "nascimento": "Nascimento"
                        }
                        
                        # Atualizar dados com mapeamento correto
                        for chave_gemini, chave_sistema in mapeamento.items():
                            if chave_gemini in dados_extraidos and dados_extraidos[chave_gemini] and dados_extraidos[chave_gemini] != "N/A":
                                dados_aluno[chave_sistema] = dados_extraidos[chave_gemini]
                        
                        print(f"‚úÖ Dados extra√≠dos: {dados_aluno['Aluno']} ({dados_aluno['Escola']})")
                except Exception as e:
                    print(f"‚ö†Ô∏è Gemini falhou, usando nome do arquivo")
            
            # Detectar respostas do aluno
            if "page_" in aluno_img and (aluno_img.endswith(".png") or aluno_img.endswith(".jpg")):
                respostas_aluno = detectar_respostas_pdf(aluno_img, debug=debug_mode)
            else:
                respostas_aluno = detectar_respostas(aluno_img, debug=debug_mode)
            
            questoes_aluno = sum(1 for r in respostas_aluno if r != '?')
            print(f"‚úÖ Respostas processadas: {questoes_aluno}/52 quest√µes detectadas")
            
            # Calcular resultado
            resultado = comparar_respostas(respostas_gabarito, respostas_aluno)
            
            # Armazenar resultado com dados completos
            resultado_completo = {
                "arquivo": aluno_file,
                "dados_completos": dados_aluno,  # Dados completos do cabe√ßalho
                "acertos": resultado['acertos'],
                "total": resultado['total'],
                "percentual": resultado['percentual'],
                "questoes_detectadas": questoes_aluno
            }
            resultados_lote.append(resultado_completo)
            
            print(f"üìä Resultado: {resultado['acertos']}/{resultado['total']} acertos ({resultado['percentual']:.1f}%)")
            
        except Exception as e:
            print(f"‚ùå ERRO ao processar {aluno_file}: {e}")
            resultado_erro = {
                "arquivo": aluno_file,
                "dados_completos": {
                    "Aluno": os.path.splitext(aluno_file)[0],
                    "Escola": "N/A",
                    "Nascimento": "N/A",
                    "Turma": "N/A"
                },
                "acertos": 0,
                "total": 52,
                "percentual": 0.0,
                "questoes_detectadas": 0,
                "erro": str(e)
            }
            resultados_lote.append(resultado_erro)
    
    # ===========================================
    # RELAT√ìRIO FINAL SIMPLIFICADO
    # ===========================================
    
    print(f"\n{'='*60}")
    print("üìä RELAT√ìRIO FINAL")
    print(f"{'='*60}")
    
    if resultados_lote:
        print(f"\n=== RESULTADOS DETALHADOS ===")
        
        # Ordenar por percentual (decrescente)
        resultados_ordenados = sorted(resultados_lote, key=lambda x: x["percentual"], reverse=True)
        
        for i, r in enumerate(resultados_ordenados, 1):
            dados = r["dados_completos"]
            nome = dados["Aluno"]
            escola = dados["Escola"]
            nascimento = dados["Nascimento"]
            turma = dados["Turma"]
            acertos = r["acertos"]
            
            status = "‚ùå" if "erro" in r else "‚úÖ"
            
            # Formato: aluno X (nome completo, escola, nascimento, turma) - acertou Y quest√µes
            print(f"{status} aluno {i} ({nome}, {escola}, {nascimento}, {turma}) - acertou {acertos} quest√µes")
        
        # Estat√≠sticas
        resultados_validos = [r for r in resultados_lote if "erro" not in r]
        if resultados_validos:
            acertos = [r["acertos"] for r in resultados_validos]
            percentuais = [r["percentual"] for r in resultados_validos]
            
            print(f"\n=== ESTAT√çSTICAS ===")
            print(f"Alunos processados: {len(resultados_validos)}/{len(arquivos_alunos)}")
            print(f"M√©dia de acertos: {sum(acertos)/len(acertos):.1f}/52 quest√µes")
            print(f"M√©dia percentual: {sum(percentuais)/len(percentuais):.1f}%")
    
    # ===========================================
    # N√ÉO ENVIAR PARA GOOGLE SHEETS (PROBLEMA DE COTA)
    # ===========================================
    
    print(f"\nüìÑ Google Sheets DESABILITADO (evitando problema de cota do Drive)")
    print(f"üí° Todos os resultados foram exibidos acima")
    
    return resultados_lote

def processar_pasta_gabaritos_com_sheets(
    diretorio: str = "./gabaritos",
    usar_gemini: bool = True,
    debug_mode: bool = False
):
    """
    Vers√£o da fun√ß√£o que ENVIA para Google Sheets com controle de rate limiting
    """
    import time
    
    print("üöÄ SISTEMA DE CORRE√á√ÉO - PASTA GABARITOS (COM GOOGLE SHEETS)")
    print("=" * 60)
    
    diretorio_gabaritos = diretorio
    
    if not os.path.exists(diretorio_gabaritos):
        print(f"‚ùå ERRO: Pasta '{diretorio_gabaritos}' n√£o encontrada!")
        print("üí° Crie a pasta informada e adicione os arquivos do gabarito e dos alunos")
        return []
    
    # Configurar suporte a PDF se dispon√≠vel
    if PDF_PROCESSOR_AVAILABLE:
        print("\nüîß Configurando suporte a PDF...")
        pdf_ok = setup_pdf_support()
        if not pdf_ok:
            print("‚ö†Ô∏è Suporte a PDF limitado - apenas imagens ser√£o processadas")
    
    # Listar arquivos suportados na pasta gabaritos
    print(f"\nüìÅ Analisando arquivos na pasta: {os.path.abspath(diretorio_gabaritos)}")
    arquivos = listar_arquivos_suportados(diretorio_gabaritos)
    
    if not arquivos['todos']:
        print("‚ùå Nenhum arquivo suportado encontrado na pasta gabaritos!")
        print("üí° Formatos suportados: PDF, PNG, JPG, JPEG, BMP, TIFF")
        return []
    
    print(f"‚úÖ Encontrados {len(arquivos['todos'])} arquivos:")
    for arquivo in arquivos['todos']:
        print(f"   üìÑ {arquivo}")
    
    # ===========================================
    # IDENTIFICAR GABARITO (L√ìGICA SIMPLIFICADA)
    # ===========================================
    
    print("\nüìã Identificando arquivo de gabarito...")
    gabarito_file = None
    
    # Buscar por qualquer arquivo que comece com "gabarito" (case insensitive)
    for arquivo in arquivos['todos']:
        if arquivo.lower().startswith('gabarito'):
            gabarito_file = arquivo
            break
    
    if not gabarito_file:
        print("‚ùå ERRO: Nenhum arquivo 'gabarito.*' encontrado!")
        print("üí° Renomeie o arquivo do gabarito para: gabarito.png, gabarito.pdf, etc.")
        return []
    
    print(f"‚úÖ Gabarito identificado: {gabarito_file}")
    
    # ===========================================
    # IDENTIFICAR ARQUIVOS DOS ALUNOS (L√ìGICA SIMPLIFICADA)
    # ===========================================
    
    print("\nüë• Identificando arquivos dos alunos...")
    
    # TODOS os arquivos que N√ÉO come√ßam com "gabarito" s√£o alunos
    arquivos_alunos = [f for f in arquivos['todos'] if not f.lower().startswith('gabarito')]
    
    if not arquivos_alunos:
        print("‚ùå ERRO: Nenhum arquivo de aluno encontrado!")
        print("üí° Adicione arquivos dos alunos na pasta gabaritos (qualquer nome exceto gabarito.*)")
        return []
    
    print(f"‚úÖ Encontrados {len(arquivos_alunos)} alunos para processar:")
    for i, aluno in enumerate(arquivos_alunos, 1):
        print(f"   {i:02d}. {aluno}")
    
    # ===========================================
    # CONFIGURAR GEMINI
    # ===========================================
    
    model_gemini = None
    if usar_gemini:
        print("\nü§ñ Configurando Gemini...")
        try:
            model_gemini = configurar_gemini()
            print("‚úÖ Gemini configurado!")
        except Exception as e:
            print(f"‚ùå Erro ao configurar Gemini: {e}")
            usar_gemini = False
    
    # ===========================================
    # CONFIGURAR GOOGLE SHEETS COM RATE LIMITING
    # ===========================================
    try:
        client = configurar_google_sheets()
        if client:
            PLANILHA_ID = "1VJ0_w9eoQcc-ouBnRoq5lFQdR2fVZkqEtR-KArZMuvk"
        else:
            print("‚ùå Erro ao configurar Google Sheets - continuando sem envio")
            client = None
    except Exception as e:
        print(f"‚ùå Erro ao configurar Google Sheets: {e}")
        client = None
    
    # ===========================================
    # PROCESSAR GABARITO (UMA VEZ APENAS)
    # ===========================================
    
    print(f"\n{'='*60}")
    print("üìã PROCESSANDO GABARITO")
    print(f"{'='*60}")
    
    try:
        # Preprocessar gabarito
        gabarito_path = os.path.join(diretorio_gabaritos, gabarito_file)
        gabarito_img = preprocessar_arquivo(gabarito_path, "gabarito")
        
        # Detectar respostas do gabarito
        if "page_" in gabarito_img and (gabarito_img.endswith(".png") or gabarito_img.endswith(".jpg")):
            respostas_gabarito = detectar_respostas_pdf(gabarito_img, debug=debug_mode)
        else:
            respostas_gabarito = detectar_respostas(gabarito_img, debug=debug_mode)
        
        questoes_gabarito = sum(1 for r in respostas_gabarito if r != '?')
        print(f"‚úÖ Gabarito processado: {questoes_gabarito}/52 quest√µes detectadas")
        
        # Exibir gabarito em formato simples
        exibir_gabarito_simples(respostas_gabarito)
        
        if questoes_gabarito < 40:
            print("‚ö†Ô∏è ATEN√á√ÉO: Poucas quest√µes detectadas no gabarito.")
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO ao processar gabarito: {e}")
        return []
    
    # ===========================================
    # PROCESSAR TODOS OS ALUNOS COM RATE LIMITING
    # ===========================================
    
    resultados_lote = []
    alunos_enviados_sheets = 0
    
    print(f"\n{'='*60}")
    print(f"üë• PROCESSANDO {len(arquivos_alunos)} ALUNOS")
    print(f"{'='*60}")
    
    for i, aluno_file in enumerate(arquivos_alunos, 1):
        print(f"\nüîÑ [{i:02d}/{len(arquivos_alunos)}] Processando: {aluno_file}")
        print("-" * 50)
        
        try:
            # Preprocessar arquivo do aluno
            aluno_path = os.path.join(diretorio_gabaritos, aluno_file)
            aluno_img = preprocessar_arquivo(aluno_path, f"aluno_{i}")
            
            # Extrair dados do cabe√ßalho (opcional com Gemini)
            dados_aluno = {
                "Aluno": os.path.splitext(aluno_file)[0],
                "Escola": "N/A",
                "Nascimento": "N/A", 
                "Turma": "N/A"
            }
            
            if usar_gemini and model_gemini:
                try:
                    dados_extraidos = extrair_cabecalho_com_fallback(model_gemini, aluno_img)
                    if dados_extraidos:
                        # Mapear chaves min√∫sculas do Gemini para mai√∫sculas do sistema
                        mapeamento = {
                            "escola": "Escola",
                            "aluno": "Aluno", 
                            "turma": "Turma",
                            "nascimento": "Nascimento"
                        }
                        
                        # Atualizar dados com mapeamento correto
                        for chave_gemini, chave_sistema in mapeamento.items():
                            if chave_gemini in dados_extraidos and dados_extraidos[chave_gemini] and dados_extraidos[chave_gemini] != "N/A":
                                dados_aluno[chave_sistema] = dados_extraidos[chave_gemini]
                        
                        print(f"‚úÖ Dados extra√≠dos: {dados_aluno['Aluno']} ({dados_aluno['Escola']})")
                except Exception as e:
                    print(f"‚ö†Ô∏è Gemini falhou, usando nome do arquivo")
            
            # Detectar respostas do aluno
            if "page_" in aluno_img and (aluno_img.endswith(".png") or aluno_img.endswith(".jpg")):
                respostas_aluno = detectar_respostas_pdf(aluno_img, debug=debug_mode)
            else:
                respostas_aluno = detectar_respostas(aluno_img, debug=debug_mode)
            
            questoes_aluno = sum(1 for r in respostas_aluno if r != '?')
            print(f"‚úÖ Respostas processadas: {questoes_aluno}/52 quest√µes detectadas")
            
            # ===========================================
            # DEBUG: MOSTRAR DETEC√á√ïES DE QUEST√ïES
            # ===========================================
            
            if debug_mode:
                print(f"\nüîç DEBUG - RESPOSTAS DETECTADAS PARA {dados_aluno['Aluno']}:")
                print("=" * 60)
                
                # Mostrar respostas em formato organizado (4 colunas, 13 linhas)
                for linha in range(13):  # 13 linhas de quest√µes
                    questoes_linha = []
                    for coluna in range(4):  # 4 colunas (A, B, C, D)
                        questao_num = linha * 4 + coluna + 1
                        if questao_num <= 52:
                            resposta = respostas_aluno[questao_num - 1] if questao_num <= len(respostas_aluno) else '?'
                            questoes_linha.append(f"Q{questao_num:02d}:{resposta}")
                    
                    print("   " + "  ".join(f"{q:<6}" for q in questoes_linha))
                
                # Mostrar estat√≠sticas de detec√ß√£o
                detectadas_por_alternativa = {
                    'A': sum(1 for r in respostas_aluno if r == 'A'),
                    'B': sum(1 for r in respostas_aluno if r == 'B'), 
                    'C': sum(1 for r in respostas_aluno if r == 'C'),
                    'D': sum(1 for r in respostas_aluno if r == 'D'),
                    '?': sum(1 for r in respostas_aluno if r == '?')
                }
                
                print(f"\nüìä ESTAT√çSTICAS DE DETEC√á√ÉO:")
                print(f"   üÖ∞Ô∏è Alternativa A: {detectadas_por_alternativa['A']} quest√µes")
                print(f"   üÖ±Ô∏è Alternativa B: {detectadas_por_alternativa['B']} quest√µes") 
                print(f"   üÖ≤ Alternativa C: {detectadas_por_alternativa['C']} quest√µes")
                print(f"   üÖ≥ Alternativa D: {detectadas_por_alternativa['D']} quest√µes")
                print(f"   ‚ùì N√£o detectadas: {detectadas_por_alternativa['?']} quest√µes")
                print(f"   ‚úÖ Total detectado: {questoes_aluno}/52 quest√µes ({(questoes_aluno/52)*100:.1f}%)")
                
                # Mostrar quest√µes n√£o detectadas se houver
                if detectadas_por_alternativa['?'] > 0:
                    nao_detectadas = [i+1 for i, r in enumerate(respostas_aluno) if r == '?']
                    print(f"   ‚ö†Ô∏è Quest√µes n√£o detectadas: {nao_detectadas}")
                
                print("=" * 60)
            
            # Calcular resultado
            resultado = comparar_respostas(respostas_gabarito, respostas_aluno)
            
            # Armazenar resultado com dados completos
            resultado_completo = {
                "arquivo": aluno_file,
                "dados_completos": dados_aluno,  # Dados completos do cabe√ßalho
                "acertos": resultado['acertos'],
                "total": resultado['total'],
                "percentual": resultado['percentual'],
                "questoes_detectadas": questoes_aluno
            }
            resultados_lote.append(resultado_completo)
            
            print(f"üìä Resultado: {resultado['acertos']}/{resultado['total']} acertos ({resultado['percentual']:.1f}%)")
            
            # ===========================================
            # ENVIAR PARA GOOGLE SHEETS COM RATE LIMITING
            # ===========================================
            
            if client:
                try:
                    print(f"üì§ Enviando para Google Sheets (aluno {i}/{len(arquivos_alunos)})...")
                    
                    # RATE LIMITING: Aguardar entre envios para evitar quota
                    if i > 1:  # N√£o aguardar no primeiro
                        time.sleep(2)
                    
                    if enviar_para_planilha(client, dados_aluno, resultado, planilha_id=PLANILHA_ID):
                        alunos_enviados_sheets += 1
                        print(f"‚úÖ Enviado para Google Sheets ({alunos_enviados_sheets}/{len(arquivos_alunos)})")
                    else:
                        print("‚ö†Ô∏è Falha no envio para Google Sheets")
                        
                except Exception as e:
                    print(f"‚ùå Erro ao enviar para Google Sheets: {e}")
                    if "quota" in str(e).lower() or "rate" in str(e).lower():
                        print("‚ö†Ô∏è Limite de quota atingido - aumentando delay...")
                        time.sleep(5)  # Delay maior em caso de quota
            
        except Exception as e:
            print(f"‚ùå ERRO ao processar {aluno_file}: {e}")
            resultado_erro = {
                "arquivo": aluno_file,
                "dados_completos": {
                    "Aluno": os.path.splitext(aluno_file)[0],
                    "Escola": "N/A",
                    "Nascimento": "N/A",
                    "Turma": "N/A"
                },
                "acertos": 0,
                "total": 52,
                "percentual": 0.0,
                "questoes_detectadas": 0,
                "erro": str(e)
            }
            resultados_lote.append(resultado_erro)
    
    # ===========================================
    # RELAT√ìRIO FINAL COM GOOGLE SHEETS
    # ===========================================
    
    print(f"\n{'='*60}")
    print("üìä RELAT√ìRIO FINAL")
    print(f"{'='*60}")
    
    if resultados_lote:
        print(f"\n=== RESULTADOS DETALHADOS ===")
        
        # Ordenar por percentual (decrescente)
        resultados_ordenados = sorted(resultados_lote, key=lambda x: x["percentual"], reverse=True)
        
        for i, r in enumerate(resultados_ordenados, 1):
            dados = r["dados_completos"]
            nome = dados["Aluno"]
            escola = dados["Escola"]
            nascimento = dados["Nascimento"]
            turma = dados["Turma"]
            acertos = r["acertos"]
            
            status = "‚ùå" if "erro" in r else "‚úÖ"
            
            # Formato: aluno X (nome completo, escola, nascimento, turma) - acertou Y quest√µes
            print(f"{status} aluno {i} ({nome}, {escola}, {nascimento}, {turma}) - acertou {acertos} quest√µes")
        
        # Estat√≠sticas
        resultados_validos = [r for r in resultados_lote if "erro" not in r]
        if resultados_validos:
            acertos = [r["acertos"] for r in resultados_validos]
            percentuais = [r["percentual"] for r in resultados_validos]
            
            print(f"\n=== ESTAT√çSTICAS ===")
            print(f"Alunos processados: {len(resultados_validos)}/{len(arquivos_alunos)}")
            print(f"M√©dia de acertos: {sum(acertos)/len(acertos):.1f}/52 quest√µes")
            print(f"M√©dia percentual: {sum(percentuais)/len(percentuais):.1f}%")
    
    # ===========================================
    # RELAT√ìRIO DO GOOGLE SHEETS
    # ===========================================
    
    if client:
        print(f"‚úÖ Alunos enviados com sucesso: {alunos_enviados_sheets}/{len(arquivos_alunos)}")
        if alunos_enviados_sheets == len(arquivos_alunos):
            pass
        else:
            print("‚ö†Ô∏è Alguns alunos podem n√£o ter sido enviados devido a limites de quota")
    else:
        print(f"\nüìä Google Sheets n√£o configurado - apenas resultados locais")
    
    return resultados_lote


# ===========================================
# EXECU√á√ÉO PRINCIPAL
# ===========================================

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Sistema automatizado de corre√ß√£o de cart√µes resposta com Google Drive e Google Sheets."
    )
    parser.add_argument(
        "--drive-folder",
        dest="drive_folder_id",
        default="13KIDX3GtQWxIxlAsX-2XS0ypJvOnnqZX",
        help="ID da pasta do Google Drive contendo gabarito e cart√µes dos alunos"
    )
    parser.add_argument(
        "--gabarito",
        action="store_true",
        help="Exibe apenas o gabarito das quest√µes em formato simples (1-A, 2-B, 3-C)"
    )

    args = parser.parse_args()

    print("üöÄ SISTEMA AUTOMATIZADO DE CORRE√á√ÉO DE CART√ÉO RESPOSTA")
    print("=" * 60)
    print("‚úÖ Configura√ß√£o autom√°tica:")
    print("   ‚Ä¢ Google Sheets: ATIVADO")
    print("   ‚Ä¢ Gemini AI: ATIVADO") 
    print("   ‚Ä¢ Logs detalhados: ATIVADO")
    print("   ‚Ä¢ Mover arquivos processados: ATIVADO")

    if PDF_PROCESSOR_AVAILABLE:
        print("\nüîß Configurando suporte a PDF...")
        pdf_ok = setup_pdf_support()
        if not pdf_ok:
            print("‚ö†Ô∏è Suporte a PDF limitado - apenas imagens ser√£o processadas")

    # Configura√ß√µes fixas para automa√ß√£o total
    usar_gemini = True
    enviar_para_sheets = True
    debug_mode = True
    mover_processados = True
    manter_temp = False

    # Sempre usar Google Drive
    drive_folder_id = args.drive_folder_id or os.getenv("DRIVE_FOLDER_ID")

    # Modo especial: apenas exibir gabarito
    if args.gabarito:
        processar_apenas_gabarito(drive_folder_id, debug_mode)
        exit(0)

        
    resultados = baixar_e_processar_pasta_drive(
        pasta_id=drive_folder_id,
        usar_gemini=usar_gemini,
        debug_mode=debug_mode,
        enviar_para_sheets=enviar_para_sheets,
        manter_pasta_temporaria=manter_temp,
        mover_processados=mover_processados
    )

    if resultados:
        pass
    else:
        print("\n‚ùå Nenhum resultado obtido.")
    
